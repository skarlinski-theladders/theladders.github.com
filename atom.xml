<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TheLadders Engineering Stories]]></title>
  <link href="http://dev.theladders.com/atom.xml" rel="self"/>
  <link href="http://dev.theladders.com/"/>
  <updated>2015-07-31T17:14:10-04:00</updated>
  <id>http://dev.theladders.com/</id>
  <author>
    <name><![CDATA[TheLadders Engineering]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visual State Testing With Mock Data]]></title>
    <link href="http://dev.theladders.com/2015/08/visual-state-testing-with-mock-data/"/>
    <updated>2015-08-03T08:00:00-04:00</updated>
    <id>http://dev.theladders.com/2015/08/visual-state-testing-with-mock-data</id>
    <content type="html"><![CDATA[<blockquote><p>Testing is organized skepticism.</p><footer><strong>&#8211;James Bach</strong></footer></blockquote>


<h1>The problem</h1>

<p><a href="https://www.theladders.com/companies/TheLadders/"><img class="right" src="http://dev.theladders.com/images/visual-state-testing-with-mock-data/companies-production-small.jpg" title="Companies Pages" ></a></p>

<p>Here at TheLadders we’ve been working on building new pages designed to provide job seekers access to data we’ve been able to collect over the years in new and interesting ways. These pages are static in design, but the amount of data available for each page can vary widely. This means we have a wide range of visual states for every element on these pages. Compounding the problem are occasional elements which impact the layout of their neighbors depending on their own state. All this brought us to a very clear need to test these visual states in an automated way.</p>

<h2>Requirements</h2>

<p>We wanted to cover all of our visual states. This meant we needed to make creating state combinations easy. Covering all of our states lets us add new elements to existing pages without worrying about breaking existing layouts. It also lets us modify shared styles and scripts without worrying about breaking layouts already using them.</p>

<p>We wanted to make sure these tests were automated and reproducible. They needed to integrate into our development, QA and release processes. Developers shouldn’t have to worry about remembering to run tests. We’ve written about how we accomplish this before with our <a href="http://dev.theladders.com/2015/03/casperjs-the-friendly-testing-framework/">friendly testing framework</a>.</p>

<p>We wanted to minimize dependencies on services or data outside of our code. Tests shouldn’t force developers to jump through additional hoops in order for the tests to run. We can’t let internal network or DB issues stop development. And we can’t let code and data get out of sync for automated tests.</p>

<br/>


<hr />

<br/>


<h1>Our Solution</h1>

<h2>URL Parameters</h2>

<p>To meet all of these requirements we use a set of optional URL parameters to force our server to generate mock data to exercise all of the UI elements on a given page. This lets us quickly define full page tests with different combinations of parameters to generate any and all possible states. These parameters are only respected in local and QA environments to keep our production site clean.</p>

<h4>Example URLs:</h4>

<p>For our companies pages, we expose the following parameters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mockData : should the server return real or mock data?
</span><span class='line'>detailLevel : controls the mock basic details data (description, location, details, etc)
</span><span class='line'>salaryPoints : controls how many mock salary points to return
</span><span class='line'>similarCompanies : controls how many mock similar company entries to return</span></code></pre></td></tr></table></div></figure>


<p>Parameters generally limit their options to meaningful data densities. E.G. “full”, “minimal”, “empty”. This decouples the test code from the page layout details.</p>

<p>To force a layout where we have only limited data for a page, the company URL would look something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://qa-1/companies/company-name/?mockData=true&detailLevel=sparse&salaryPoints=none&similarCompanies=minimal</span></code></pre></td></tr></table></div></figure>


<p>And results in a page which looks like:
<a href="http://dev.theladders.com/images/visual-state-testing-with-mock-data/sparse-mock-data.jpg"><img class="center" src="http://dev.theladders.com/images/visual-state-testing-with-mock-data/sparse-mock-data-small.jpg" title="Sparse Data" ></a></p>

<p>And to force a layout with lots of details and available data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://qa-1/companies/company-name/?mockData=true&detailLevel=verbose&salaryPoints=full&similarCompanies=extra</span></code></pre></td></tr></table></div></figure>


<p>Resulting in a page like:
<a href="http://dev.theladders.com/images/visual-state-testing-with-mock-data/full-mock-data.jpg"><img class="center" src="http://dev.theladders.com/images/visual-state-testing-with-mock-data/full-mock-data-small.jpg" title="Sparse Data" ></a></p>

<p>In order to test as much of the stack as we can and increase our test coverage for free, these parameters are passed all the way to the point in the code where we query our data stores, at which point the code simply has to check the flags to determine which data store, real or mock, to retrieve data from. This also means that the only code which has to change is the data retrieval code. No other server code and no client code has to worry about where the data is coming from. As long as it’s in the same format, they handle it just like real data from our data stores.</p>

<h2>The Mock Data</h2>

<p>Once we defined how we were going to request mock data, we had to decide how to provide it. The brute force approach of forcing developers to hand-code all desired variations wasn’t acceptable. This would have been a burden on developers and the end result would have been brittle. Any future updates to the data models would have forced developers to go back and update all of the previously defined mock data.</p>

<p>Our approach is to randomly generate all mock data. This way developers only have to define a generation function once per data point and then simply generate as many instances of those data points as are requested. This makes it much easier to cover all data states and eliminates hand coded data as long as you provide re-usable utility methods for string fields like names and titles.</p>

<h2>The Code</h2>

<p>Our server code is written entirely in Scala with Spring bindings.</p>

<p>Example entry point code:</p>

<figure class='code'><figcaption><span>Example entry point code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="s">&quot;/companies/{companyName}&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">companyPage</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">companyName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                  <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">defaultValue</span> <span class="k">=</span> <span class="s">&quot;false&quot;</span><span class="o">)</span> <span class="n">useMockData</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span>
</span><span class='line'>                  <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">defaultValue</span> <span class="k">=</span> <span class="s">&quot;full&quot;</span><span class="o">)</span> <span class="n">mockDetailLevel</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                  <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">defaultValue</span> <span class="k">=</span> <span class="s">&quot;full&quot;</span><span class="o">)</span> <span class="n">mockSalaryPoints</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                  <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">defaultValue</span> <span class="k">=</span> <span class="s">&quot;full&quot;</span><span class="o">)</span> <span class="n">mockSimilarCompanies</span><span class="k">:</span> <span class="kt">String</span> <span class="o">)</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">request</span> <span class="k">=</span> <span class="nc">CompanyRequest</span><span class="o">(</span><span class="n">companyName</span><span class="o">,</span>
</span><span class='line'>                                 <span class="n">useMockData</span> <span class="o">&amp;&amp;</span> <span class="nc">Environment</span><span class="o">.</span><span class="n">current</span> <span class="o">!=</span> <span class="nc">Prod</span><span class="o">,</span>
</span><span class='line'>                                 <span class="n">mockDetailLevel</span><span class="o">,</span>
</span><span class='line'>                                 <span class="n">mockSalaryPoints</span><span class="o">,</span>
</span><span class='line'>                                 <span class="n">mockSimilarCompanies</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">doCompanyQuery</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">buildView</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example data query code:</p>

<figure class='code'><figcaption><span>Example data query code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">querySimilarCompanies</span><span class="o">(</span><span class="n">request</span><span class="k">:</span> <span class="kt">CompanyRequest</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">SimilarCompany</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="n">useMockData</span><span class="o">)</span> <span class="nc">MockData</span><span class="o">.</span><span class="n">similarCompanies</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="n">mockSimilarCompanies</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">realSearchGateway</span><span class="o">.</span><span class="n">similarCompanies</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="n">companyName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">similarCompanies</span><span class="o">(</span><span class="n">switch</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">SimilarCompany</span><span class="o">]</span> <span class="k">=</span> <span class="k">match</span> <span class="n">switch</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;minimal&quot;</span>  <span class="k">=&gt;</span> <span class="n">buildSimilarCompanies</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;full&quot;</span>     <span class="k">=&gt;</span> <span class="n">buildSimilarCompanies</span><span class="o">(</span><span class="mi">24</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;extra&quot;</span>    <span class="k">=&gt;</span> <span class="n">buildSimilarCompanies</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="o">|</span> <span class="s">&quot;none&quot;</span> <span class="k">=&gt;</span> <span class="nc">Seq</span><span class="o">.</span><span class="n">empty</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example mock data generation code:</p>

<figure class='code'><figcaption><span>Example mock data generation code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">private</span> <span class="k">final</span> <span class="k">val</span> <span class="nc">BUILD_SIMILAR_SEED</span> <span class="k">=</span> <span class="mi">9284756</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">buildSimilarCompanies</span><span class="o">(</span><span class="n">count</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">SimilarCompany</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">rng</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">(</span><span class="nc">BUILD_SIMILAR_SEED</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">count</span><span class="o">)</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">SimilarCompany</span><span class="o">(</span><span class="n">name</span> <span class="k">=</span> <span class="n">getRandomCompanyName</span><span class="o">(</span><span class="n">rng</span><span class="o">),</span>
</span><span class='line'>                     <span class="n">similarity</span> <span class="k">=</span> <span class="n">rng</span><span class="o">.</span><span class="n">nextFloat</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">openJobs</span> <span class="k">=</span> <span class="n">rng</span><span class="o">.</span><span class="n">nextInt</span><span class="o">(</span><span class="mi">50</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<br/>


<hr />

<br/>


<h1>Gotchas</h1>

<p>There are a few things to look out for with this approach. The first is to make sure the mock data generated is the same every time you run the test. This is as simple as seeding your random number generators and making sure to create them fresh for every request batch. If you don’t seed your random number generator you’ll get different results ever time, and if you don’t create a new seeded generator for each request batch the order of your tests will change what data is actually generated.</p>

<p>With all of this great UI test coverage it’s important not to neglect the code which actually queries the real data stores. Now that most tests never have to hit the data stores, it’s especially important to cover the data query code with their own unit and integration tests.</p>

<p>The flags and settings for mock data are specified at the entry points, but they’re not used until much further down the call chain. This can lead to mock-related code sprinkled throughout the code path if you’re not careful. In our current implementation we capture the mock flags in our entry points and store them in a single object which is passed to all data retrieval methods. This has been a nice simple approach for us which contains the flags to a single object. Each data-store gateway does still need to know how to provide mock or real data based on those flags, but keeping the mock data generation code centralized to one object per-page helps re-centralize the problem.</p>

<p>And finally we’ve found it’s best to have as many query switches as you have stateful elements on your page. This makes it easy to compose and maintain any number of tests from the individual mock data pieces. Most of our mock data generation is extended by our technical QA to help cover all of the UI states. It also lets us easily test components in isolation where necessary.</p>

<br/>


<hr />

<br/>


<h1>Conclusion</h1>

<p>This approach to testing our visual states with mock data has proven invaluable as we build out more and more information-centric pages. I hope this approach finds a useful place in your arsenal of testing strategies on your current or future projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Our YouTube Channel]]></title>
    <link href="http://dev.theladders.com/2015/06/announcing-our-youtube-channel/"/>
    <updated>2015-06-10T17:34:00-04:00</updated>
    <id>http://dev.theladders.com/2015/06/announcing-our-youtube-channel</id>
    <content type="html"><![CDATA[<blockquote><p>In the future, everyone will be world-famous for 15 minutes.</p><footer><strong>&#8211;Andy Warhol</strong></footer></blockquote>


<p>At TheLadders, we try to support our engineers in their continued education
in every way we can. One way we do that is with our <a href="http://dev.theladders.com/2015/02/conclave/">technology conclaves</a> which we host every Friday afternoon. They&rsquo;re an opportunity for our engineers to learn something outside of their day-to-day work. Past topics have included everything from an introduction to data science and how compilers work to a deep dive into HTTP and how to prove anything (Not all of our talks are strictly technical.)</p>

<p>While we have had many people from outside of the company attend our conclaves, we always wanted to open it up even further. We understand it&rsquo;s hard for most people to get out of work to attend a talk at another company&rsquo;s office. That&rsquo;s why we&rsquo;ve started filming these talks and posting them to YouTube. We hope you enjoy them as much as we do.</p>

<p>Our first video is a lightning talk called <a href="https://www.youtube.com/watch?v=14OcQHxSODQ">&ldquo;A Mostly True Story about Memory&rdquo;</a> presented by <a href="http://dev.theladders.com/ourteam/andrewturley/">Andrew Turley</a>, one of our software architects (and manager of our Platform team.) In the video, Andy explains how memory works, all while wearing an amazing cat t-shirt.</p>

<p>We&rsquo;re going to post more of these talks at the weeks go by so <a href="http://www.twitter.com/TheLaddersDev">follow us</a> on Twitter or subscribe to our <a href="https://www.youtube.com/channel/UC0BhGK1ctsyDdMmE8MecYhQ">YouTube channel</a> to stay in the loop about new videos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Principles and Goals (Part 3) - Being Expressive in Code]]></title>
    <link href="http://dev.theladders.com/2015/05/design-principles-and-goals-being-expressive-in-code/"/>
    <updated>2015-05-22T12:26:00-04:00</updated>
    <id>http://dev.theladders.com/2015/05/design-principles-and-goals-being-expressive-in-code</id>
    <content type="html"><![CDATA[<blockquote><p>Clean code always looks like it was written by someone who cares</p><footer><strong>&#8211; Michael Feathers</strong></footer></blockquote>


<p>Welcome back to the last post in our series on our design goals and principles.  We&rsquo;ve talked about our <a href="http://dev.theladders.com/2015/05/design-principles-and-goals-high-level-architecture">High Level Architecture</a> and <a href="http://dev.theladders.com/2015/05/design-principles-and-goals-a-trip-back-to-oo">Our Trip Back to OO</a>, and now we&rsquo;re going to dig into how we write and compose our code, and how we try to be expressive in what our code says.</p>

<h1>Don’t write code, write sentences that tell a story</h1>

<p>You should have to think hard to write code, not read it.  One of the things we focus on a lot is how the code reads.  Is the code full of programmer terms like ‘build’ and ‘create’ or does it read like a fluent paragraph?  Some might consider it a small detail and fluffy, but it can directly impact how maintainable code is.  A lot of times we write code in ways that only programmers understand, and while we speak the language, it can still add a small mental overhead that really isn’t needed.</p>

<p>JavaBeans is great as a naming convention if you’re relying on reflective frameworks to read properties out of data structures, but inappropriate for true domain models.</p>

<p>Even the small things – this isn’t a direct example, but similar to what we run into a lot.  Why do we have to write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="nf">buildJobseeker</span><span class="o">(</span><span class="n">premiumSubscription</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you read it out loud, you get “return build Jobseeker premium Subscription get status.”  Huh?  Why can’t we write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="nf">jobseekerWith</span><span class="o">(</span><span class="n">premiumSubscription</span><span class="o">.</span><span class="na">status</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you read that out loud, you get “return Jobseeker with premium Subscription status.”  Makes a little more sense – and anyone, developer or not, should be able to understand it just by reading words.</p>

<p>We do this sort of thing on both a small and large scale &ndash; we name things for their calling context and intent.  We might rename something just so it reads better in the code that is calling it.  It’s important to note that we’re talking about our end application &ndash; code that one project owns and consumes &ndash; so we can make assumptions about how the code will be called and see it easily.  The same ideas don’t necessarily apply to things like reusable libraries.</p>

<p>Some other examples from our code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">currentUser</span><span class="o">.</span><span class="na">refer</span><span class="o">(</span><span class="n">someoneElse</span><span class="o">).</span><span class="na">forThe</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">unlike</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
</span><span class='line'><span class="n">jobseeker</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">paymentHistory</span><span class="o">.</span><span class="na">includingOnly</span><span class="o">(</span><span class="n">selectedPaymentIds</span><span class="o">)).</span><span class="na">to</span><span class="o">(</span><span class="n">outputStream</span><span class="o">,</span> <span class="n">asPdf</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Separating mechanics from meaning</h1>

<p>There are a lot of times we have to do things that are “mechanical” that don’t really have any inherent meaning to the task at hand, but are really just supporting code.  Things like constructing specific Date instances, interfacing with other library/framework components, or looping over collections.  This supporting code serves a purpose, but lacing it within the more expressive code of business logic only serves as clutter.  Separating mechanical code from business code leaves the important code cleaner and simpler, highlighting what’s really happening.</p>

<p>A real world example for retrieving the jobs that a Jobseeker has applied to:</p>

<p>Old Code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">JobRepresentation</span><span class="o">&gt;</span> <span class="nf">getAppliedJobsFor</span><span class="o">(</span><span class="kd">final</span> <span class="n">Jobseeker</span> <span class="n">jobseeker</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">ProcessedApplication</span><span class="o">&gt;</span> <span class="n">applications</span> <span class="o">=</span> <span class="n">jobApplicationSystem</span><span class="o">.</span><span class="na">getApplicationsFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Filter to only include succeeded applications</span>
</span><span class='line'>  <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">ProcessedApplication</span><span class="o">&gt;</span> <span class="n">succeededApplications</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">applications</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">ProcessedApplication</span><span class="o">&gt;()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">ProcessedApplication</span> <span class="n">application</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">application</span><span class="o">.</span><span class="na">succeeded</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">succeededApplications</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">ProcessedApplication</span><span class="o">,</span> <span class="n">JobRepresentation</span><span class="o">&gt;()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">JobRepresentation</span> <span class="nf">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">ProcessedApplication</span> <span class="n">application</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">get</span><span class="o">(</span><span class="n">application</span><span class="o">.</span><span class="na">getJobLocationId</span><span class="o">(),</span> <span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>   <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">JobRepresentation</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">JobLocationId</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">Jobseeker</span> <span class="n">jobseeker</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">repository</span><span class="o">.</span><span class="na">getJobsFor</span><span class="o">(</span><span class="n">ids</span><span class="o">).</span><span class="na">toRepresentationsFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In 5 seconds – can you tell me what’s going on?  Probably not – there are a lot of mechanics clouding the way.  We have some meaningful things buried in anonymous functions and a lot of lines that are just compiler syntax.  We make a pretty liberal use of Google’s Guava library to implement functions and transforms, but when left to roam free in our application code they can wreak havoc.  With a few small changes: the addition of a ProcessedApplications wrapper class and a class just to create our Guava transform from ProcessedApplication to Job, we can make our high level application code much more expressive.</p>

<p>What we ended up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">JobRepresentation</span><span class="o">&gt;</span> <span class="nf">getAppliedJobsFor</span><span class="o">(</span><span class="n">Jobseeker</span> <span class="n">jobseeker</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="n">ProcessedApplications</span> <span class="n">applications</span> <span class="o">=</span> <span class="n">jobApplicationSystem</span><span class="o">.</span><span class="na">getApplicationsFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">applications</span><span class="o">.</span><span class="na">thatAreSuccessful</span><span class="o">().</span><span class="na">transformed</span><span class="o">(</span><span class="n">toJobs</span><span class="o">()).</span><span class="na">toRepresentationsFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">ProcessedApplications</span><span class="o">,</span> <span class="n">Jobs</span><span class="o">&gt;</span> <span class="n">toJobs</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">processedApplicationsToJobs</span><span class="o">.</span><span class="na">toJobs</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all the mechanics of looping over applications and creating Guava functions are hidden away in lower components, and we’re left with the quick makings of a sentence, “Return applications that are successful, transformed to jobs, to representations for the jobseeker.”  We could probably have gone one step further to:</p>

<p>“Return applications that are successful, transformed to job representations for the jobseeker”</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">applications</span><span class="o">.</span><span class="na">thatAreSuccessful</span><span class="o">().</span><span class="na">transformed</span><span class="o">(</span><span class="n">toJobRepresentationsFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Speaking the domain language in code</h1>

<p>One of the things I like to do when looking at code is to ask where I would expect to find something.  “What happens when ABC does XYZ?”  “Where do I start looking for code related to ABC?”  A lot of times these are questions you either have to already know the answer to, hunt for, or ask someone who knows the system.  We’re gunning for a better answer &ndash; start by looking for class ABC and a method called XYZ.</p>

<p>So asking the questions – “What happens when a Jobseeker upgrades” and “Where do I start looking for code related to upgrades?”  Did anyone immediately say to themselves, “well it would be in UpgradeService or UpgradeManager?”  It’s a common paradigm, and one we’ve used extensively in the past.</p>

<p>Sometimes we have to take a step back and think about how we’re modeling and interacting.  An example is our transition from a stateless service for completing upgrades to domain models that complete the upgrade and reflect a language we can relate to.   Originally, there was an UpgradeService that had a method accepting a Jobseeker, ProductOption, and PaymentMethod.  It then went on to organize the interactions of these together to complete the upgrade.  This left the higher level application(client of the domain) code less expressive.</p>

<p>UpgradeWorkflow (Use Case):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Jobseeker</span> <span class="n">jobseeker</span> <span class="o">=</span> <span class="n">allJobseekers</span><span class="o">.</span><span class="na">jobseekerWith</span><span class="o">(</span><span class="n">jobseekerId</span><span class="o">);</span>
</span><span class='line'><span class="n">NewCreditCard</span> <span class="n">card</span> <span class="o">=</span> <span class="n">creditCard</span><span class="o">(</span><span class="n">newCreditCardRepresentation</span><span class="o">,</span> <span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'><span class="n">ProductOption</span> <span class="n">productOption</span> <span class="o">=</span> <span class="n">allProductOptions</span><span class="o">.</span><span class="na">optionFor</span><span class="o">(</span><span class="n">productOptionId</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">upgradeService</span><span class="o">.</span><span class="na">upgrade</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">,</span> <span class="n">productOption</span><span class="o">,</span> <span class="n">creditCard</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>UpgradeService:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">UpgradeReceipt</span> <span class="nf">upgrade</span><span class="o">(</span><span class="n">Jobseeker</span> <span class="n">jobseeker</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">ProductOption</span> <span class="n">productOption</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">PaymentMethod</span> <span class="n">paymentMethod</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">Receipt</span> <span class="n">receipt</span> <span class="o">=</span> <span class="n">makePayment</span><span class="o">(</span><span class="n">productOption</span><span class="o">,</span> <span class="n">paymentMethod</span><span class="o">,</span> <span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Subscription</span> <span class="n">subscription</span> <span class="o">=</span> <span class="n">upgrade</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">,</span> <span class="n">productOption</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">upgradeReceiptOf</span><span class="o">(</span><span class="n">subscription</span><span class="o">,</span> <span class="n">receipt</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Receipt</span> <span class="nf">makePayment</span><span class="o">(</span><span class="n">ProductOption</span> <span class="n">productOption</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">PaymentMethod</span> <span class="n">paymentMethod</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">Jobseeker</span> <span class="n">jobseeker</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">Payment</span> <span class="n">payment</span> <span class="o">=</span> <span class="n">upgradeOptionFactory</span><span class="o">.</span><span class="na">optionFor</span><span class="o">(</span><span class="n">productOption</span><span class="o">,</span> <span class="n">jobseeker</span><span class="o">).</span><span class="na">asPayment</span><span class="o">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">payment</span><span class="o">.</span><span class="na">makeWith</span><span class="o">(</span><span class="n">paymentMethod</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After some refactoring to allow the models to complete the work on their own, we were still left with a question – what does the interaction look like?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">productOption</span><span class="o">.</span><span class="na">upgradeToWith</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">,</span> <span class="n">creditCard</span><span class="o">);</span>  <span class="c1">// ?</span>
</span><span class='line'><span class="n">productOption</span><span class="o">.</span><span class="na">upgradeFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">).</span><span class="na">payingWith</span><span class="o">(</span><span class="n">creditCard</span><span class="o">);</span> <span class="c1">// ?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Taking a step back, the important question is – how would we have a conversation about this?  How would a Product Manager explain this use case?  They would probably say “the Jobseeker is upgrading to the selected product option, and paying by credit card.”  So that’s what the code looks like – a sentence (or close to it) that says just that.  So in the end, the application code looks like:</p>

<p>UpgradeWorkflow (Use Case):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Jobseeker</span> <span class="n">jobseeker</span> <span class="o">=</span> <span class="n">allJobseekers</span><span class="o">.</span><span class="na">jobseekerWith</span><span class="o">(</span><span class="n">jobseekerId</span><span class="o">);</span>
</span><span class='line'><span class="n">NewCreditCard</span> <span class="n">card</span> <span class="o">=</span> <span class="n">creditCard</span><span class="o">(</span><span class="n">newCreditCardRepresentation</span><span class="o">,</span> <span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'><span class="n">ProductOption</span> <span class="n">productOption</span> <span class="o">=</span> <span class="n">allProductOptions</span><span class="o">.</span><span class="na">optionFor</span><span class="o">(</span><span class="n">productOptionId</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">jobseeker</span><span class="o">.</span><span class="na">upgradingTo</span><span class="o">(</span><span class="n">productOption</span><span class="o">).</span><span class="na">payBy</span><span class="o">(</span><span class="n">creditCard</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>upgradingTo returns an Upgrade with a payBy method that has meaningful steps within it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">UpgradeReceipt</span> <span class="nf">payBy</span><span class="o">(</span><span class="n">CreditCard</span> <span class="n">card</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">charge</span><span class="o">(</span><span class="n">card</span><span class="o">);</span>
</span><span class='line'>  <span class="n">upgradeSubscription</span><span class="o">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">upgradeReceipt</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So back to our questions:</p>

<p>What happens when a Jobseeker upgrades?  Open the Jobseeker class and find the method for upgrading.</p>

<p>Where do I start looking for code related to upgrades?”  Open the Upgrade class.</p>

<h1>First class collections</h1>

<p>Rather than passing around Collection<Model>, we frequently create meaningful classes to encapsulate the collection.  This provides a natural home for many operations like sorting, transforming, filtering, etc.  This reduces clutter in calling code and makes it more expressive (noticing a pattern yet?), hiding away the mechanical details of iterating over collections in order to do something.</p>

<p>If we take a look at an earlier example, we have a Users class that handles things like filtering and sorting:</p>

<p>some methods from our Users class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Users</span> <span class="nf">sorted</span><span class="o">(</span><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">sorted</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">users</span><span class="o">);</span>
</span><span class='line'>  <span class="n">sorted</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">comparator</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Users</span><span class="o">(</span><span class="n">sorted</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Users</span> <span class="nf">without</span><span class="o">(</span><span class="n">Users</span> <span class="n">otherUsers</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">without</span><span class="o">(</span><span class="n">otherUsers</span><span class="o">.</span><span class="na">users</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Users</span> <span class="nf">without</span><span class="o">(</span><span class="n">User</span><span class="o">...</span> <span class="n">otherUsers</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">without</span><span class="o">(</span><span class="n">asList</span><span class="o">(</span><span class="n">otherUsers</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Users</span> <span class="nf">without</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">otherUsers</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">trimmedDown</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashSet</span><span class="o">&lt;&gt;(</span><span class="n">users</span><span class="o">);</span>
</span><span class='line'>  <span class="n">trimmedDown</span><span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="n">otherUsers</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Users</span><span class="o">(</span><span class="n">trimmedDown</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>our SearchWorkflow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Users</span> <span class="n">matchingUsers</span> <span class="o">=</span> <span class="n">allUsers</span><span class="o">.</span><span class="na">matching</span><span class="o">(</span><span class="n">query</span><span class="o">).</span><span class="na">without</span><span class="o">(</span><span class="n">currentUser</span><span class="o">).</span><span class="na">sorted</span><span class="o">(</span><span class="n">by</span><span class="o">(</span><span class="n">Name</span><span class="o">.</span><span class="na">lastThenFirst</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>to do the same thing with regular collections, our calling code would probably look something more like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">matchingUsers</span> <span class="o">=</span> <span class="n">allUsers</span><span class="o">.</span><span class="na">matching</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">withoutCurrentUser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">matchingUsers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">user</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">currentUser</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withoutCurrentUser</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">withoutCurrentUser</span><span class="o">,</span> <span class="n">by</span><span class="o">(</span><span class="n">Name</span><span class="o">.</span><span class="na">lastThenFirst</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>and who wants to read that??  By using first class collections, we can write more declarative high level code that almost reads like English.</p>

<h1>In Closing</h1>

<p>Code that reads well and overall quality are things that we highly value.  We want our code to express itself to the next developer that has to come and make changes &ndash; and that’s at the heart of our principles: change.  If code never changed, we wouldn’t need any of these values.  But that’s the point of software &ndash; it’s soft. And that&rsquo;s what this series is really about &ndash; high level architecture, OO principles, expressive code &ndash; all working together to embrace change and make it easier, because that’s where the value really is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Principles and Goals (Part 2) - A Trip Back to OO]]></title>
    <link href="http://dev.theladders.com/2015/05/design-principles-and-goals-a-trip-back-to-oo/"/>
    <updated>2015-05-21T12:02:00-04:00</updated>
    <id>http://dev.theladders.com/2015/05/design-principles-and-goals-a-trip-back-to-oo</id>
    <content type="html"><![CDATA[<blockquote><p>Being abstract is something profoundly different from being vague&#8230; The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise.</p><footer><strong>&#8211; Edsger Dijkstra</strong></footer></blockquote>


<p>Welcome to part two of our series on the design principles and goals behind our newer customer facing web services.  In <a href="http://dev.theladders.com/2015/05/design-principles-and-goals-high-level-architecture">Part 1</a> we covered our <a href="http://dev.theladders.com/2015/05/design-principles-and-goals-high-level-architecture/">High Level Archicture</a> and talked about how domain models are the heart of our systems.  We&rsquo;ll pick up there, and go into some more detail in how we build those models, how they focus on behavior, and how we serialize them for the API endpoints.</p>

<h1>Getting Back to OO roots</h1>

<p>It’s no great secret that today’s world is full of procedural Java code and engineers that have been taught that encapsulation means having getters and setters to hide properties (hey&hellip;I used to be one of em once upon a time).</p>

<p>In the past we’ve blogged about our onboarding process, which involves an <a href="https://github.com/TheLadders/object-calisthenics">Object Calisthenics exercise</a> and <a href="https://github.com/TheLadders/solid-exercises">Uncle Bob’s SOLID videos</a>.  What good would all that be if we left it at exercises and discussions?  We put a lot of that to work in our newer customer facing web services.</p>

<h2>Use Polymorphic classes instead of conditionals</h2>

<p>Rather than relying on conditionals and asking data related questions of our models, we try to rely more on interfaces and subtypes for behavior and “tell don’t ask.”  Hidden “type checks” are the worst offenders, and usually a prime candidate for polymorphic models that expose better meaning.  What do I mean by a hidden type check?  Things like customer.isGoldLevelMember(), vehicle.hasFourWheels(), person.isChild().  Those are really asking about what “type” of thing we’re talking about.  We’ll get into more about exposing meaning over type checks in the “Making implicit concepts explicit” section.  Along with polymorphism comes the good ole…</p>

<h2>Visitor Pattern</h2>

<p>This is something that pops up quite a bit throughout our use cases.  We often have mixed collections of an abstraction, where each item may be a different subclass.  Perhaps a collection of activity between you and a Recruiter, or interesting notifications for you to see.<br/>
Most of the time, this boils down to just creating different representations of each object to serialize and send back to the client, so we’ve taken to calling them Presenters.</p>

<p>The visitor pattern has been around for a long time, and allows us to let the compiler do the dirty work of telling us where we need to make code changes when adding a new type.</p>

<p>The textbook example of a Visitor relies directly on compiler type checks, something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ShapeVisitor</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Circle</span> <span class="n">circle</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Square</span> <span class="n">square</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VisitableShape</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ShapeVisitor</span> <span class="n">visitor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">implements</span> <span class="n">VisitableShape</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ShapeVisitor</span> <span class="n">visitor</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">VisitableShape</span> <span class="n">shape</span> <span class="o">=</span> <span class="err">…</span>
</span><span class='line'><span class="n">shape</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of times we take this a little bit further, and our Visitor will also be a data contract of what’s expected for each case, and also return something.  In the case of displaying someone’s activity feed, we have something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Presenter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">profileSaveOn</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">eventDate</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">T</span> <span class="nf">profileViewOn</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">eventDate</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">T</span> <span class="nf">jobApplyRating</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">eventDate</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">JobApplyRatingType</span> <span class="n">type</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">DateTime</span> <span class="n">jobApplyDate</span><span class="o">,</span>
</span><span class='line'>                   <span class="n">JobSummary</span> <span class="n">jobSummary</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">T</span> <span class="nf">hiringAlert</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">eventDate</span><span class="o">,</span>
</span><span class='line'>                <span class="n">JobSummary</span> <span class="n">jobSummary</span><span class="o">,</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">T</span> <span class="nf">directMessage</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">eventDate</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">T</span> <span class="nf">resumeDownload</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">eventDate</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">T</span> <span class="nf">resumeShare</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">eventDate</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">RecruiterEvent</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">presentedWith</span><span class="o">(</span><span class="n">Presenter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">presenter</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResumeDownload</span> <span class="kd">extends</span> <span class="n">RecruiterEvent</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">presentedWith</span><span class="o">(</span><span class="n">Presenter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">presenter</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">presenter</span><span class="o">.</span><span class="na">resumeDownload</span><span class="o">(</span><span class="n">eventDate</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if we add a new type of activity, we add another method to our Presenter, and the compiler tells us all the places we need to account for, no guesswork!  We’ve also created a data contract between our models and concrete presenters, so that we can maintain data encapsulation in our models and be explicit about what data is needed for each type of activity.</p>

<h3>Presenters for business rules</h3>

<p>We also frequently use a flavor of the visitor pattern to enforce business rules, even if we may not have explicit types for each case.  While not your textbook implementation, it still takes advantage of double dispatch to realize different scenarios (rather than types).</p>

<p>So what might that look like?  We have an interface that represents the possible states of a Recruiter that we care about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Presenter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">validRecruiter</span><span class="o">(</span><span class="n">RecruiterData</span> <span class="n">recruiterData</span><span class="o">);</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">invalidRecruiter</span><span class="o">(</span><span class="n">RecruiterData</span> <span class="n">recruiterData</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>RecruiterData is just a Data Transfer Object that contains the recruiter’s data.  This Presenter interface allows us to contain the rules for what “valid” means within the Recruiter class itself, while allowing(and forcing) applications to consider what happens when a Recruiter is invalid.</p>

<p>Recruiter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">presentedWith</span><span class="o">(</span><span class="n">Presenter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">presenter</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isVisible</span><span class="o">())</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">presenter</span><span class="o">.</span><span class="na">validRecruiter</span><span class="o">(</span><span class="n">asData</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">presenter</span><span class="o">.</span><span class="na">invalidRecruiter</span><span class="o">(</span><span class="n">asData</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isVisible</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">subscription</span><span class="o">.</span><span class="na">allowsRecruiterToBeVisible</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">profile</span><span class="o">.</span><span class="na">isVisible</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows our Recruiter class to be more about behavior and enforcing our business rules, and less about what data properties a recruiter has.</p>

<h3>Presenters for hiding dependencies</h3>

<p>This same concept is how we keep Jersey isolated to the web components.  Our business tier depends on a JobPresenter interface, and the Jersey resource passes in an implementation that happens to use Jersey classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">JobPresenter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">success</span><span class="o">(</span><span class="n">JobRepresentation</span> <span class="n">jobRepresentation</span><span class="o">);</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">forbidden</span><span class="o">(</span><span class="n">JobRepresentation</span> <span class="n">jobRepresentation</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JerseyJobPresenter</span> <span class="kd">implements</span> <span class="n">JobPresenter</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">success</span><span class="o">(</span><span class="n">JobRepresentation</span> <span class="n">jobRepresentation</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">buildResponse</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">OK</span><span class="o">,</span> <span class="n">jobRepresentation</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">forbidden</span><span class="o">(</span><span class="n">JobRepresentation</span> <span class="n">jobRepresentation</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">buildResponse</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">FORBIDDEN</span><span class="o">,</span> <span class="n">paywallFor</span><span class="o">(</span><span class="n">jobRepresentation</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>we then have code in the Workflow that looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JobRepresentation</span> <span class="n">jobRepresentation</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="na">representationFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">PayWall</span><span class="o">.</span><span class="na">isHitFor</span><span class="o">(</span><span class="n">jobseeker</span><span class="o">,</span> <span class="n">job</span><span class="o">))</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">presenter</span><span class="o">.</span><span class="na">forbidden</span><span class="o">(</span><span class="n">jobRepresentation</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">presenter</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">jobRepresentation</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enums</h2>

<p>Ahh enums.  Yes enums get their own special little blurb, because enums are special.  Enums let you do bad bad things, without you ever noticing.  The problem with enums is&hellip;us.   Developers tend to allow the entire application to know that a class is an enum, and pepper instance checks throughout it.  This ends up leaking more information then it needs to, and can make it hard to switch a class from being an enum to a real class.  Our rule is that only two kinds of places should know that it’s an enum at all &ndash; the enum itself, and the classes that pick an enum value.</p>

<h3>No public type checking</h3>

<p>The fact that a class is an enum should be an implementation detail, not a contract.  It also makes it hard to add new enum values, and violates the Open Closed Principle.  Therefore, the only class that should compare enum instance equality is the enum class.  That means that other classes should not do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">Status</span><span class="o">.</span><span class="na">APPROVED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>but instead ask the enum the question directly via status.isApproved(), or even better tell it to do something (tell don&rsquo;t ask).</p>

<p>Two enum checks is a sign that there’s a more meaningful concept hiding there</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">day</span> <span class="o">==</span> <span class="n">Day</span><span class="o">.</span><span class="na">SATURDAY</span> <span class="o">||</span> <span class="n">day</span> <span class="o">==</span> <span class="n">Day</span><span class="o">.</span><span class="na">SUNDAY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>the above is hiding a very important concept, something like day.isOnTheWeekend();</p>

<p>Who says enums have to be void of logic?  Logic belongs where it belongs, regardless of whether the class is a typical class or an enum.  Enums should be viewed as just a way to restrict input values, and possibly make the internal implementation of the class easier.  Here’s an example of one of our enums:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">ProfileStatus</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">NO_PROFILE</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span>
</span><span class='line'>  <span class="n">INCOMPLETE</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span>
</span><span class='line'>  <span class="n">PENDING</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span>
</span><span class='line'>  <span class="n">DECLINED</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span>
</span><span class='line'>  <span class="n">PERMANENTLY_DECLINED</span><span class="o">(</span><span class="mi">4</span><span class="o">),</span>
</span><span class='line'>  <span class="n">APPROVED</span><span class="o">(</span><span class="mi">5</span><span class="o">),</span>
</span><span class='line'>  <span class="n">DELETED</span><span class="o">(</span><span class="mi">6</span><span class="o">),</span>
</span><span class='line'>  <span class="n">SUSPENDED</span><span class="o">(</span><span class="mi">7</span><span class="o">),</span>
</span><span class='line'>  <span class="n">PENDING_ESCALATED</span><span class="o">(</span><span class="mi">8</span><span class="o">),</span>
</span><span class='line'>  <span class="n">REMOVED</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">ProfileStatus</span><span class="o">&gt;</span> <span class="n">CAN_BE_EXPEDITED</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">INCOMPLETE</span><span class="o">,</span>
</span><span class='line'>                                                                                  <span class="n">PENDING</span><span class="o">,</span>
</span><span class='line'>                                                                                  <span class="n">PENDING_ESCALATED</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span>                              <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">ProfileStatus</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isApproved</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">APPROVED</span> <span class="o">==</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isExpeditedBy</span><span class="o">(</span><span class="n">ProfileStatus</span> <span class="n">expeditedProfileStatus</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">canBeExpedited</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">expeditedProfileStatus</span><span class="o">.</span><span class="na">isApproved</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">canBeExpedited</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">CAN_BE_EXPEDITED</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once upon a time the INCOMPLETE, PENDING, and PENDING_ESCALATED were checked against with == by another class, and it was hard to figure out what was really going on.  Now we’ve introduced names for what that grouping is &ndash; something that can be expedited &ndash; and contained that within this class.  This leaves the calling code more expressive:</p>

<p>Profile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">statusAllowsVisibility</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">profileStatus</span><span class="o">.</span><span class="na">isApproved</span><span class="o">()</span> <span class="o">||</span> <span class="n">profileStatus</span><span class="o">.</span><span class="na">isExpeditedBy</span><span class="o">(</span><span class="n">expeditedProfileStatus</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Making implicit concepts explicit</h2>

<p>One of the things that became hard to manage in our old system is the difference between Basic and Premium accounts.  We were switching on basic/premium for almost everything that acted differently in each scenario, which becomes a problem in many ways:</p>

<p>If we want to add another type (which we did, called Freemium), we now have to go find all those conditional statements and add another part to handle Freemium accounts.</p>

<p>Meaning – What does it mean to have a Basic, Premium, or Freemium account?  In order to answer that in our old system, you have to go find the 100s of conditionals that do something different in each case.  The meaning was held implicitly in the code that called methods like isBasic(), crippling our ability to meaningfully describe the difference between the accounts.</p>

<p>The answer?  Model the <strong>behavior</strong> of each type of account, and make the meaning <strong>explicit</strong>.  Instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">If</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">isBasic</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">..</span> <span class="n">can</span><span class="err">’</span><span class="n">t</span> <span class="n">apply</span> <span class="o">..</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">..</span> <span class="n">can</span> <span class="n">apply</span> <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>just ask the question of a polymorphic object – can they apply?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">permissions</span><span class="o">.</span><span class="na">canApply</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">..</span> <span class="n">can</span> <span class="n">apply</span> <span class="o">..</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">..</span> <span class="n">can</span><span class="err">’</span><span class="n">t</span> <span class="n">apply</span> <span class="o">..</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BasicPermissions</span>
</span><span class='line'><span class="nf">canApply</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="n">canUpgrade</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">PremiumPermissions</span>
</span><span class='line'><span class="nf">canApply</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="n">canUpgrade</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This encapsulates the meaning of Basic vs. Premium in type specific models, and also alleviates problems that the Open Closed Principle highlights.  Determining whether or not users can apply to a job has now become an explicit part of our domain model.  If we need to add another type (like Freemium), all we have to do is create a new FreemiumPermissions class and <em><strong>describe what it means</strong></em> to be Freemium.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FreemiumPermissions</span>
</span><span class='line'><span class="nf">canApply</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">numberOfApplicationsThisWeek</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">canUpgrade</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have an explicit rule that we are only allowed to ask if a user is basic/premium/freemium/etc for two reasons:</p>

<ul>
<li>copy and branding, since it might say the word “Basic” or “Premium”</li>
<li>a factory is creating a polymorphic model</li>
</ul>


<p>other than that, we must ask a behavioral question instead.</p>

<h2>Return null, get shot</h2>

<p>One of our rules in the new code is to never publicly return or pass null to another class.  Never.  You can try, but people are clumsy&hellip;stairs are slippery&hellip;accidents are bound to happen.  Null can be used in classes internally and must be accounted for at system boundaries, but is considered a true error anywhere else.  These are also the only places that defensive null checks are considered appropriate.   So how do we accomplish that?  We stole code.</p>

<h3>Call me Maybe</h3>

<p>We created our our Maybe class, based off of Nat Pryce’s <a href="https://github.com/npryce/maybe-java.">https://github.com/npryce/maybe-java.</a> Maybe is similar to Scala’s Option and Java 8’s Optional.  Anywhere we expose a value that is optional and could be null, we expose a Maybe.  This clearly demarcates when and where a value may or may not be present, and forces us to be more explicit about what happens if it’s not there.</p>

<p>The Null Object pattern is also valuable, but is really only useful for behavioral classes that can provide sensible implementations for methods.  It doesn’t work as well for data driven classes – what do you return if someone calls firstName() or id() for Recruiter data that doesn’t exist?  That’s when Maybe becomes a better choice.</p>

<p>So in light of returning things that might not exist, either return a Maybe, Null Object, or throw an exception.  Keep null checking at the system boundaries, and we never have to wonder where along the line something is or isn’t null.</p>

<p>Example for jobseeker salary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Salary</span> <span class="n">salary</span> <span class="o">=</span> <span class="n">serviceJobseeker</span><span class="o">.</span><span class="na">getSalary</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">salary</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">salary</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
compared to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">serviceJobseeker</span><span class="o">.</span><span class="na">getSalary</span><span class="o">().</span><span class="na">query</span><span class="o">(</span><span class="n">isBelow</span><span class="o">(</span><span class="n">limit</span><span class="o">)).</span><span class="na">otherwise</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>or even better:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">serviceJobseeker</span><span class="o">.</span><span class="na">salary</span><span class="o">(</span><span class="n">isBelow</span><span class="o">(</span><span class="n">limit</span><span class="o">)).</span><span class="na">otherwise</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
There is a tradeoff though, particularly for Java 7 and below &ndash; we have to create a Google Guava function, which is ugly.  We&rsquo;re willing to accept this little bit of ugliness and tuck it away at the bottom of the class, or in its own class itself (much less of a problem in Java 8).
SalaryPredicates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Salary</span><span class="o">&gt;</span> <span class="nf">isBelow</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Salary</span><span class="o">&gt;()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Salary</span> <span class="n">salary</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">salary</span><span class="o">.</span><span class="na">isBelow</span><span class="o">(</span><span class="n">limit</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When talking about being expressive in code, readability, and separating mechanics from meaning – we’ve made a nice improvement.  There are some mechanics in the first example, mixed in between the code that enforces the business rules.  The last example is short and sweet, and only contains the parts we really care about.  This really starts to become beneficial when you have to manipulate optional data more than once as it passes through the system.</p>

<h3>JDK8</h3>

<p>Some of our web services are running on JDK8, which introduces its own Optional class, first class functions, and lambda expressions.  This makes conforming to this rule much much easier.  Jackson also has a JDK8 module that understands Optional, so our representation/serialization classes can use them directly, and much of our code has no reason to use nulls whatsoever from end to end.</p>

<h2>Wrapping up</h2>

<p>We&rsquo;ve talked a little bit about how we use polymorphism and OO fundamentals to enforce the rules of our system, and how we can model behavior and meaning in order to be more extensible and accepting of change.  Relying on abstraction for important parts of our system is central in our code, and in strong object oriented design in general.  In tomorrow&rsquo;s post, we&rsquo;ll dig a little deeper into being expressive in code, and how we like to write our code line by line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Principles and Goals (Part 1) - High Level Architecture]]></title>
    <link href="http://dev.theladders.com/2015/05/design-principles-and-goals-high-level-architecture/"/>
    <updated>2015-05-20T15:47:00-04:00</updated>
    <id>http://dev.theladders.com/2015/05/design-principles-and-goals-high-level-architecture</id>
    <content type="html"><![CDATA[<blockquote><p>If you&#8217;re building for the future, you need to keep your foundations strong</p><footer><strong>&#8211;Robin Longstride</strong></footer></blockquote>


<h1>Rebuilding for the Future</h1>

<p>A few years ago, we began rebuilding the member experience on theladders.com from almost the ground up.  It was previously a typical Spring MVC/JSP request based application, but it was decided that we would start over with a different client/server model.  The end result is a Single Page Application &ndash; a JavaScript thick(er) client and a RESTful web service.  It went fully live in September of 2012 (which means this post is long overdue), and set the stage for how we would build our customer facing web services to come.  The architecture, design goals, and principles we’ve held in rebuilding our server also came to light in the web services we build for our mobile applications, and have matured and come full circle since the rebuild was first launched.  We’re going to post a small series over the next few days sharing some of those details.</p>

<h3>A look at the past</h3>

<p>As we’ve built our new servers, we’ve kept in mind our existing code bases and some of the pain points we felt there.  Our legacy code had fallen prey to many of the typical symptoms that long living code bases fall into: business logic in JSPs, logic scattered throughout the application requiring <a href="https://sourcemaking.com/refactoring/shotgun-surgery">shotgun surgery</a> to fix, difficulty trying new business models, dependency nightmares.  Just looking up the data for a user required a massive dependency tree, in large part due to the lookup class also mixing in unrelated functionality for performing actions for many different use cases.  Broad sweeping projects were frequently estimated on the scale of months, and our code was fighting back against change.  We wanted to paint a better picture for the future, so these pain points were at the forefront of our minds as we wrote new code.</p>

<h3>General Approach</h3>

<p>Our approach has been heavily influenced by Domain Driven Design and Robert Martin’s <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID principles</a>.  We wanted to build an application that would be accepting of change (and in fact embrace it) and be maintainable into the future.  At the top of the list are things like readability, expressive code, extensive test coverage, flexible domain code, and separation of concerns like web/API vs. business rules.  Much of what we will discuss isn’t new or of our own creation, but has been around for a while, just waiting to be put to use.  We won&rsquo;t get into all the nitty gritty details, but hopefully give a good explanation of the principles that guide us and why we value them.</p>

<p>As a technical team, we frequently watch Uncle Bob’s Clean Code episodes, covering a range of topics from things like class and method design/implementation, to high level concepts like application architecture and component/module/library design.  We’ve specifically pulled the SOLID principles into our <a href="http://dev.theladders.com/2013/02/onboarding/">onboarding bootcamp</a>, as they provide a great foundation for object oriented design.  We wanted to keep these principles at heart when moving forward with our new member site.</p>

<h3>Client and Server Overview</h3>

<p>Our client is a Single Page Application leveraging Backbone.js.  There are only a few HTML pages rendered by the server, one of which loads up the client application.  I mentioned that we have a thick(er) client, because I wouldn’t quite call it a full blown thick client.  Making requests to the server is still central to the client working, but it is a stateful GUI in its own right, handling problems like caching, history, and emulating a local “session.”</p>

<p>The server is a stateless RESTful web service, utilizing Jersey as our web layer framework, Spring for Dependency Injection, and a variety of things for data access (we read/write data from different kinds of stores).  The bulk of our business rules and data processing lives here, with business decisions typically communicated to the client via Hypermedia links.  It frequently talks to other “core domain” web services and applies processing on top, so we typically refer to it as an orchestration service.  It was written in Java 7, which brought up several challenges in trying to conform to our principles that we’ll cover later on.</p>

<hr />

<h2>High Level Architecture</h2>

<p>We’ll start with a high level view of our general application architecture.  It’s a typical N-tier application, where we view the business tier as being further subdivided in half.  We’ll call the three major layers Presentation, Business, and Storage, with the Business Layer also distinguishing between Application and Domain.  Presentation usually refers to a layer dealing with UI concerns, but in the case of a RESTful service it’s our web/API layer.</p>

<p><img class="center" src="http://dev.theladders.com/images/new-lw-design/nlw-application-architecture.png" title="'High Level Architecture'" ></p>

<p><strong>Presentation</strong></p>

<p>Key Components</p>

<ul>
<li>Resource

<ul>
<li>The web/presentation component. We use Jersey, so we’ve taken to calling them Resources.  Spring MVC would call them Controllers.  These should handle pulling/pushing data from/to a request/response, possibly user facing validation, etc.  This component (and related friends) is the only place that web framework imports may be used, such as Jersey classes.  And that’s it &ndash; ideally methods on these components are one liners calling out to a Workflow.  Any logic not dealing with web specifics should live in the workflow/domain/service components.</li>
</ul>
</li>
<li>Representation

<ul>
<li>The web layer’s version of the model.  It “represents” the JSON contract between the client and server, which is handled by JAXB/Jackson.  Technically this crosses into the business tier as well, as it’s there that these are typically instantiated and then returned to the Resource.  It is acting as both a DTO across the web/application boundary and the presentation model.  While this is not a pure separation of concerns, it’s a tradeoff that we’re willing to make in order to keep things simple.</li>
</ul>
</li>
</ul>


<p><strong>Business</strong></p>

<p>Key Components</p>

<ul>
<li>Workflow

<ul>
<li>Also called Application Layer, Use Case, or Service Facade &ndash; this represents the entry point of a business task/use-case. Most of the time, these should not directly implement solutions, but rather be a high level coordinator of other objects (it can be viewed as a facade over finer grained models/services). This is a great candidate for a business level acceptance/integration test.  A workflow shouldn’t be reused by any other business components.  Reusing them from other resources is okay if the use-case is really the same. Should never be used by lower components. These ultimately answer to their use-case.</li>
</ul>
</li>
<li>Domain Models

<ul>
<li>The heart of our application.  When we say Domain Model, we don’t mean a class with a bunch of getters and setters.  Quite the opposite &ndash; we shun getters and setters in these classes, and make exceptions where practical.  These classes hold most of the logic and decisions of our application.  Instead of exposing getters and being about data, they expose meaningful methods about behavior.</li>
</ul>
</li>
<li>Services (Domain or Infrastructure)

<ul>
<li>These are meant to be highly reusable components &ndash; building blocks for other parts of the system. They are meant to encapsulate logic/actions that don&rsquo;t necessarily belong in the domain, or to any single domain model. These ultimately answer to re-usability and/or the domain.</li>
</ul>
</li>
</ul>


<p><strong>Storage</strong></p>

<p>Key Components</p>

<ul>
<li>Repository (typically called AllSomethings)

<ul>
<li>Represents a store for an entity (an &lsquo;aggregate root&rsquo; in DDD terms). The store could be whatever (relational DB, file, in memory, backed by a RESTful web service). This may handle reads/writes/queries directly and/or delegate them to internal members (like if it needed 2 DAOs to create an entity). Think of it as a slightly higher level concept of a DAO. The repository might execute SQL queries itself, it might coordinate another DAO or 2 to execute SQL queries, or it might not even use a database at all &ndash; maybe it hits another web service. What&rsquo;s important about a repository is what it represents &ndash; a store for a particular model.  Repositories are really viewed as a collection of models that happens to persist between restarts.  An object returned from a Repository should be fully instantiated with everything it needs.</li>
<li>We follow the “collection of models” mentality when naming repositories and their methods as well.  Where you might typically see something like jobseekerDao.insert(jobseeker), we would write either allJobseekers.add(jobseeker) or jobseeker.addTo(allJobseekers).</li>
<li>The naming convention of AllSomethings allows for some really interesting method names that read more naturally in high level code, like our workflow for searching users:

<ul>
<li>Users matchingUsers = allUsers.matching(query).except(currentUser).sorted(by(Name.lastThenFirst()));</li>
</ul>
</li>
</ul>
</li>
<li>DAO

<ul>
<li>Pretty much anything else dealing with reading/writing data that doesn’t represent a store for a model.</li>
</ul>
</li>
</ul>


<h2>Model things with…Models</h2>

<p>Many software engineers are familiar with the Controller/Service/DAO pattern, complete with a “model” that travels between the layers.  A lot of times, it may just be Controller/DAO.  If you’re lucky, you may even have been on a project that split the Service tier into Use Case services and building block services.  And if you were really lucky, you might have even had different models at different layers when things didn&rsquo;t fit quite right.  Unfortunately, that’s usually not the case.  More than likely, the “model” is a JavaBean that is full of getters and setters, and void of business logic – leaving the rules up to the services.  That&rsquo;s not to say that these things are wrong, there are certainly cases where they are beneficial &ndash; it&rsquo;s just not for us.  There is rarely ever a golden &ldquo;right&rdquo; way, there are only different options with tradeoffs.</p>

<p>In our new systems, we’re using the models as the heart of our design.  They own the rules, the domain, and the logic.  That doesn’t mean that we don’t have stateless service classes – we do – but they play a much different role.  Instead of a Controller/Service/DAO pattern, we end up with something more like Controller/Use Case/Repository, with the typical steps being:</p>

<ol>
<li>   Controller reads (unmarshals) the request, and hands it off to the Use Case</li>
<li>   The Use Case either creates a model via a factory, or looks one up from a repository</li>
<li>   The Use Case tells the model to do something</li>
</ol>


<p>An example is how we unsubscribe a subscription.  There is no manager or service like</p>

<pre><code>subscriptionService.unsubscribe(jobseekerId, exitSurvey.unsubscribeReason());
</code></pre>

<p>Instead, inside the Use Case we get a Subscription model, and tell it to unsubscribe:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Subscription subscription = allSubscriptions.subscriptionFor(jobseekerId);
</span><span class='line'>subscription.unsubscribeWith(exitSurvey.unsubscribeReason());</span></code></pre></td></tr></table></div></figure>


<p>It might not seem like much, but now we have stateful models that use our terms – we talk about “Subscriptions” in meetings, not a “Subscription Service.”  It also gives us a better home to determine things like – what happens when we try to unsubscribe a Basic Subscription?  What happens when we try to unsubscribe a Premium subscription?  If we only had a SubscriptionService, we’d probably be looking for a switch statement in there somewhere, something like isPremium or isBasic.  Instead, we have 2 different Subscription model implementations – BasicSubscription and PremiumSubscription, each which house their own rules for what should happen in their particular case.</p>

<p>This was a fairly simple example, but we can also take a look at some of the methods on one of our User models:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  public Connection connectWith(User anotherUser)
</span><span class='line'>  public void accept(Connection connection)
</span><span class='line'>  public void ignore(Connection connection)
</span><span class='line'>  public void disconnect(Connection connection)
</span><span class='line'>  public void reconnect(Connection connection)
</span><span class='line'>  public NewMessage send(NewMessageRepresentation message)
</span><span class='line'>  public void receive(NewMessage newMessage)
</span><span class='line'>  public void like(Job job)
</span><span class='line'>  public void unlike(Job job)</span></code></pre></td></tr></table></div></figure>


<p>These methods are all about the User doing something rather than just returning data to a caller.  Sending a message looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Component
</span><span class='line'>public class SendMessageWorkflow
</span><span class='line'>{
</span><span class='line'>  @Inject
</span><span class='line'>  private AllUsers allUsers;
</span><span class='line'>
</span><span class='line'>  public void send(NewMessageRepresentation message,
</span><span class='line'>                   UserId currentUserId,
</span><span class='line'>                   UserId recipientId)
</span><span class='line'>  {
</span><span class='line'>    User currentUser = allUsers.findBy(currentUserId);
</span><span class='line'>    User anotherUser = allUsers.findBy(recipientId);
</span><span class='line'>
</span><span class='line'>    currentUser.send(message).to(anotherUser);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Enabling domain models with dependencies</h2>

<p>This is a topic of debate within the scope of models that “do things” rather than anemic models.  We’ve decided to go down the route of having models that contain their dependencies, enabling them to complete their tasks on their own, with method arguments only requiring things that are related to the domain.</p>

<p>This is similar to the approach that many frameworks like Rails/Grails take, you can just call model.save().  While the basic crud operations are nice to have completely encapsulated within the model, the advantage comes in higher level concepts.  We can write code like user.like(job) or currentUser.connectWith(anotherUser).</p>

<h3>Mapping models to storage</h3>

<p>Because our models are behavior driven (and often polymorphic), they frequently don’t map to storage frameworks very well.  We’re ok with that &ndash; most of the time we’ll have a separate set of storage layer classes that are more suitable for that type of thing.  Those classes might have public final variables or a bunch of getters/setters on them: they’re meant to expose their data, it’s their purpose.  Our domain models should be free from having to worry about the persistence layer.  A question we like to ask a lot is: Database?  What database?  Who said anything about a database?  And who said it was relational?</p>

<p>We want our application code to make sense regardless of whether or not there’s a database.  We read data from a variety of different stores: relational DB tables, key/value stores like Riak/Couchbase/Memcached, other web services, etc.  In some applications, we have a “standalone” mode where everything is just held in memory.  We like to avoid having the storage layer mechanism leaking out and affecting our other code &ndash; we want to be able to swap different implementations in/out at will, with minimal impact.</p>

<p>It&rsquo;s common to find something similar to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface AllSomethings
</span><span class='line'>{
</span><span class='line'>  void add(Something something):
</span><span class='line'>  void remove(Something something);
</span><span class='line'>  Somethings createdBy(UserId userId);
</span><span class='line'>  Somethings postedBefore(Date date);
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>@Repository
</span><span class='line'>@Profile("standalone")
</span><span class='line'>public class AllSomethingsInMemory implements AllSomethings
</span><span class='line'>{
</span><span class='line'>  private Set&lt;Something&gt; somethings;
</span><span class='line'>  ...
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>@Repository
</span><span class='line'>@Profile("default")
</span><span class='line'>public class AllSomethingsInMySql implements AllSomethings
</span><span class='line'>{
</span><span class='line'>  @Inject
</span><span class='line'>  private SomethingsSql sql;
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Presenting models</h3>

<p>This is a RESTful web API, so at some point we&rsquo;ve got to expose data.  But we said we&rsquo;re anti-getters on our domain models, so how do we do it?  One of the responsibilities of a model is not to expose each property individual, but rather present itself in some fashion.  Many times this is just a represention() or toRepresentation() method that returns the presentation layer class, and sometimes we introduce an interface if we want to decouple the model from the presentation class or response being sent back.  We&rsquo;ll dig a little more into our Presenter interfaces in our next post.</p>

<h2>Typical Usage Scenario</h2>

<p>The handling of a GET request typically looks like this:</p>

<ul>
<li>The request comes in and gets picked up by a Jersey resource.  This handles the unmarshalling of any data, request parameter extraction, and/or retrieval of the “current user” identification if necessary.  It then immediately passes control to a Workflow for the specific use case at hand.</li>
<li>The Workflow looks up one or more models from the Repositories</li>
<li>The Workflow coordinates the model(s) to complete the task at hand</li>
<li>A Representation is generated (sometimes by a model, sometimes by the Workflow) and returned to the Resource</li>
<li>The Resource adds any necessary hypermedia links and returns the representation to be marshaled.

<ul>
<li>Technically we use a Jersey Resource filter to add the links after returning from our Resource class, but it’s still ultimately viewed as a responsibility of the Resource</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Component
</span><span class='line'>@Produces(MediaType.APPLICATION_JSON)
</span><span class='line'>@Path(“path/to/matches”)
</span><span class='line'>@Scope(Scopes.REQUEST)
</span><span class='line'>public class JobMatchResource
</span><span class='line'>{
</span><span class='line'>  @Inject
</span><span class='line'>  private JobMatchesWorkflow jobMatchesWorkflow;
</span><span class='line'>
</span><span class='line'>  @GET
</span><span class='line'>  public JobRepresentations getMatches(@For JobseekerId jobseekerId)
</span><span class='line'>  {
</span><span class='line'>    return jobMatchesWorkflow.matchesFor(jobseekerId);
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@Component
</span><span class='line'>public class JobMatchesWorkflow
</span><span class='line'>{
</span><span class='line'>  @Inject
</span><span class='line'>  private Recommender recommender;
</span><span class='line'>  @Inject
</span><span class='line'>  private AllJobs     allJobs;
</span><span class='line'>  @Inject
</span><span class='line'>  private AllJobseekers allJobseekers;
</span><span class='line'>
</span><span class='line'>  public JobRepresentations matchesFor(JobseekerId jobseekerId)
</span><span class='line'>  {
</span><span class='line'>    JobIds recommendedJobIds = recommender.jobMatchesFor(jobseekerId);
</span><span class='line'>    Jobs jobs = allJobs.forThe(recommendedJobIds);
</span><span class='line'>    Jobseeker jobseeker = allJobseekers.jobseekerWith(jobseekerId);
</span><span class='line'>
</span><span class='line'>    return jobs.thatArentBad().toRepresentationsFor(jobseeker);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Wrapping up</h2>

<p>That about sums up some of our high level philosophies, architecture, and control flow.  We’ve set up an environment where layer responsibilities are clearly separated, the workflow steps of completing a task are managed in one place and separate from the details of how those steps are carried out, and placed our domain models at the heart of our system.  Our next post will share some details of <a href="http://dev.theladders.com/2015/05/design-principles-and-goals-a-trip-back-to-oo">Our Trip Back to OO</a> and how we implement the logic behind those steps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working in Harmony: ES6 in a nutshell]]></title>
    <link href="http://dev.theladders.com/2015/05/working-in-harmony-es6-in-a-nutshell/"/>
    <updated>2015-05-04T16:05:00-04:00</updated>
    <id>http://dev.theladders.com/2015/05/working-in-harmony-es6-in-a-nutshell</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;JavaScript is a language with more than its share of bad parts.&#8221;</p><footer><strong>&#8211;Douglas Crockford</strong> <cite>JavaScript: The Good Parts</cite></footer></blockquote>


<h1>Harmony</h1>

<p>JavaScript, also known as ECMAScript, has extended its life beyond the boundaries of the browser. It can be found in <a href="https://nodejs.org/">server side code</a>, in <a href="http://docs.unity3d.com/Manual/CreatingAndUsingScripts.html">video game engines</a>, even frameworks to run C programs in the <a href="http://asmjs.org/">browser</a>. Unfortunately, the language specification has not been updated since 2009, which in turn has led to different frameworks and tools to accommodate for the lack of features.  Luckily, TC-39, the committee for approving ECMAScript, has a targeted release date of June 2015 for the next version of ECMAScript (ES6). ECMAScript is a significant update to the language and brings a slew of new features.</p>

<p>Here are several of the important features that will make the ES6 release:</p>

<h1>Modules</h1>

<p>Modules provide private and public encapsulation to limit the creation of variables and functions on the global scope. They are part of a popular design pattern that has resulted in several frameworks such as <a href="http://requirejs.org/">RequireJS</a>, <a href="http://browserify.org/">Browserify</a>, and <a href="http://webpack.github.io/">Webpack</a>. ES6 provides a native solution that combines attributes of both CommonJS and AMD.</p>

<ul>
<li>Similar to CommonJS, native modules provide a compact syntax, a preference for single exports and support for cyclic dependencies.</li>
<li>Similar to AMD, they have direct support for asynchronous loading and configurable module loading.</li>
</ul>


<p>Let&rsquo;s look at an example of using native modules. Within a utility file, we have two functions, sumOfNumbers and logMessage. The module pattern allows us to choose which functions or attributes we want to expose to our consumers. There are two kinds of exports:</p>

<ul>
<li><strong>named exports</strong> (several per module), where the user specifies the name of the attribute on import.</li>
<li><strong>default exports</strong> (one per module), where the compiler picks the export item labeled with the default keyword when it cannot match a named export.</li>
</ul>


<p><em>Note:</em> You can run the following examples in babel&rsquo;s <a href="https://babeljs.io/repl/">live script editor</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// lib/utility.js</span>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">sumOfNumbers</span><span class="p">(){</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'> <span class="k">return</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">logMessage</span><span class="p">(</span><span class="nx">msg</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Message is &#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">logMessage</span><span class="p">,</span> <span class="nx">sumOfNumbers</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;utility&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">logMessage</span><span class="p">(</span><span class="nx">sumOfNumbers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span> <span class="c1">// Message is 15</span>
</span><span class='line'><span class="nx">logMessage</span><span class="p">(</span><span class="nx">sumOfNumbers</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">));</span> <span class="c1">// Message is 19</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Classes</h1>

<p>ES6 brings classes to the language. The class implementation still uses prototypical inheritance, so it is syntactic sugar to make it easier to implement and understand.  Using the <strong>extends</strong> keyword provides the following benefits:</p>

<ul>
<li>Binds the correct context when using the <em>extends</em> keyword.</li>
<li>Methods defined within the class block are defined on the prototype object.</li>
<li>Provides the <em>super</em> keyword to easily invoke parent methods.</li>
</ul>


<p>As a simple example of class inheritance, let&rsquo;s create a shape class with a triangle child class extending from shape.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Traditional way to create inheritance</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Shape</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Shape&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Triangle</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
</span><span class='line'><span class="c1">//Note: not a convenient way to invoke parent constructor</span>
</span><span class='line'><span class="c1">// we have to call the parent object with Triangle&#39;s context.</span>
</span><span class='line'>  <span class="nx">Shape</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sides</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Triangle</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span> <span class="c1">//prototype object now inheritances the properties of Shape</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Triangle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Triangle&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//ES6 Way to create inheritance</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Shape</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">width</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// properties of the class</span>
</span><span class='line'>  <span class="nx">height</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// note: they are NOT private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//function called with you call Shape with &#39;new&#39; keyword</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//method part of shape</span>
</span><span class='line'>  <span class="nx">printObject</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Shape&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Triangle</span> <span class="kr">extends</span> <span class="nx">Shape</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">sides</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//invokes the parent constructor by calling super</span>
</span><span class='line'>    <span class="c1">// automatically applies the correct context.</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Overrides the method on the parent object</span>
</span><span class='line'>  <span class="nx">printObject</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//Draw the triangle</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Triangle&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can apply this new syntax to existing frameworks such as Backbone.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//current backbone implementation</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MyView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;Sample Template&lt;/div&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;click&#39;</span> <span class="o">:</span> <span class="s1">&#39;clickHandler&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">clickHandler</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;My view was clicked&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Backbone using classes</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">MyView</span> <span class="kr">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;Sample Template&lt;/div&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;click&#39;</span> <span class="o">:</span> <span class="s1">&#39;clickHandler&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">clickHandler</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;My view was clicked&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Arrow Functions</h1>

<p>ES6 has also added arrow functions, which provide a for more concise syntax for anonymous functions. However, there are a number of differences between arrow functions and traditional JavaScript functions:</p>

<ul>
<li><strong>Lexical <em>this</em> binding</strong> &ndash; The value of <em>this</em> inside of the function is determined by where the arrow function is defined, not where it is used.</li>
<li><strong>Not <em>new</em>-able</strong> &ndash; Arrow functions do not have a constructor method and therefore can not be used to create instances. Arrow functions throw an error when called with &ldquo;new&rdquo;.</li>
<li><strong>Cannot change the value of <em>this</em></strong> &ndash; The value of <em>this</em> remains the same value throughout the lifecycle of the function.</li>
<li><strong>No <em>arguments</em> object</strong> &ndash; Function arguments are not accessible through the arguments object; you must use named arguments or ES6 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:rest_parameters">rest arguments</a>.</li>
</ul>


<p>Here is a simple example using arrow functions.  We are iterating of a list of items and printing out each number to the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//Current javascript implementation</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ES6 - Arrow functions</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">number</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at more practical example using an event handler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Current Javascript implementation</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="s2">&quot;Hello I am a person&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Problem with current Javascript that we have to &quot;bind&quot; the person context </span>
</span><span class='line'>  <span class="c1">// in order to get the callback to work properly.  Without &quot;bind&quot;, the function</span>
</span><span class='line'>  <span class="c1">// would print out undefined.</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ES6</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="s2">&quot;Hello I am a person&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//No longer need to &quot;bind&quot; the function since it is set to where it is defined.</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arrow functions also provide different types of optional syntax.  Here are several examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//arrow functions return last value, no need for return statement.</span>
</span><span class='line'> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">number</span> <span class="o">=&gt;</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'> <span class="c1">//need empty parentheses if no parameters are passed</span>
</span><span class='line'> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">map</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'> <span class="c1">//multiple parameters </span>
</span><span class='line'> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Destructing Variables</h1>

<p>Destructuring allows binding via pattern matching. ES6 supports matching for arrays and objects. It will try to match the variable directly and return undefined when no match is found.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="kc">false</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//first = 1, third = 3</span>
</span><span class='line'> <span class="kd">var</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="p">,</span> <span class="nx">third</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">;</span>
</span><span class='line'> <span class="kd">var</span> <span class="p">{</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//prints out 4</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span> <span class="c1">//prints out false</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//assigning value of &#39;b&#39; in object to variable &#39;anotherName&#39;</span>
</span><span class='line'> <span class="kd">var</span> <span class="p">{</span><span class="nx">b</span><span class="o">:</span> <span class="nx">anotherName</span><span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">anotherName</span><span class="p">);</span> <span class="c1">//prints out &#39;Hello&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Default, Rest, Spread</h1>

<p>ES6 provides the flexibility to set default values for function parameters. It lets you grab trailing values without using the arguments keyword. And it also allows you to turn an array into consecutive arguments for a function call. With these options, there is no longer a need to use the arguments variable.</p>

<h5>Default Parameter</h5>

<ul>
<li>Current values that are not set are given a value of undefined. ES6 provides new syntax to add default values for parameters.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">add2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">add2</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// returns 7</span>
</span><span class='line'>  <span class="nx">add2</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//return 4</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Rest parameter</h5>

<ul>
<li>Currently, in order to grab all argument values as an array, we need to explicitly convert the values using the arguments keyword.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">// Current Javascript</span>
</span><span class='line'>    <span class="c1">//need to convert arguments into an array object in order to use any useful method.</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">sum</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ES6</span>
</span><span class='line'>    <span class="c1">// The conversion happens automatically. </span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">numbers</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Spread parameter</h5>

<ul>
<li>Spread functionality allows us to convert an array into consecutive arguments to pass into a function. Currently, we have to use the <em>apply</em> keyword in order to provide the same functionality.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">//current implementation</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>  <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">);</span> <span class="c1">//spreads the array and returns 5</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Future implementation</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>  <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">//performs the same action</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Current Alternatives</h1>

<p>The JavaScript specification is targeted to release in June, but it could take browsers months to <a href="http://kangax.github.io/compat-table/es6/">implement</a> these new features and years before users decide it&rsquo;s a good time to upgrade their browsers. Luckily, there are solutions which allow us to take advantage of these features right now. Here are several options:</p>

<h3><a href="https://babeljs.io/"><img src="https://raw.githubusercontent.com/babel/logo/master/logo.png" alt="Babel" width="250px"></a></h3>

<ul>
<li>A compiler for converting ES6 syntax to ES5-compatible javascript. Babel is among the most mature compilers for ES6 conversion with the options of extensible plugins as well as framework and tool integration.</li>
</ul>


<h3><a href="https://github.com/google/traceur-compiler"><img src="https://google.github.com/traceur-compiler/logo/tc.svg" alt="Traceur logo" width="200px"> Traceur</a></h3>

<ul>
<li>Google&rsquo;s version of Babel. Traceur is a JavaScript.next-to-JavaScript-of-today compiler that allows you to use features from the future today. Traceur supports ES6 as well as some experimental ES.next features.</li>
</ul>


<h3><a href="http://www.typescriptlang.org/"><img src="http://www.typescriptlang.org/content/images/logo_small.png" alt="Typescript"></a></h3>

<ul>
<li>Typescript is a typed superset of JavaScript that compiles to plain JavaScript. It also provides the option of applying types to variables and functions at compile time. TypeScript provides the flexibility of using ES6 features such as classes, modules and arrow function which ultimately compile to ES5 compatible JavaScript. Similar to Babel, Typescript has integrations with many development environments and definition files for existing frameworks.</li>
</ul>


<h3><a href="http://flowtype.org/"><img src="http://flowtype.org/static/flow-hero-logo.png" alt="Flow" width="200px"></a></h3>

<ul>
<li>Flow is a new static type checker for JavaScript. Flow is similar to Typescript in that it will compile down to plain JavaScript. The difference is that it provides valid checking for null variable type. Flow integrates well with other Facebook tools such as React and Flux.</li>
</ul>


<h1>Conclusion</h1>

<p>ECMAScript 6 provides an array of exciting tools and libraries that we can leverage to make development both easier and more exciting. Though we know that it could be months before we can use these tools natively, we have alternatives that allow developers to expand their toolsets and think of efficient and abstract solutions. If interested in learning more, here are several links:</p>

<h4>Resources:</h4>

<ul>
<li><a href="https://github.com/lukehoban/es6features">All ES6 Features</a></li>
<li><a href="https://leanpub.com/understandinges6/">Understanding ES6 &ndash; Nicolas Zakas</a></li>
<li><a href="https://babeljs.io/docs/learn-es6/">Try ES6 Compilation using Babel</a></li>
<li><a href="https://www.youtube.com/watch?v=DqMFX91ToLw">Evolution of Javascript &ndash; Netflix Javascript Talks</a></li>
<li><a href="https://people.mozilla.org/~jorendorff/es6-draft.html">EcmaScript 6 Draft</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing better API tests]]></title>
    <link href="http://dev.theladders.com/2015/04/writing-better-api-tests/"/>
    <updated>2015-04-27T17:41:00-04:00</updated>
    <id>http://dev.theladders.com/2015/04/writing-better-api-tests</id>
    <content type="html"><![CDATA[<blockquote><p>It is only through labor and painful effort, by grim energy and resolute courage, that we move on to better things.</p><footer><strong>&#8211;Theodore Roosevelt</strong></footer></blockquote>


<h1>The problem</h1>

<p>When I was first tasked with writing the web service for our <a href="http://www.theladders.com/mobile/">jobseeker iOS app</a>, I wanted to be able to write tests against the API without diving into the world of iOS automated functional testing.  I really didn’t see a need to fire up an iOS client just so I could make calls to a service that was under heavy development and in a constant state of change.  So how could I write tests that would exercise the API in a way similar to an iOS client?</p>

<p>Fortunately for me, engineers at TheLadders have always emphasized testing in one form or another.  Sometimes this means a unit test for a particular method on a class.  Other times it means an automated functional test (AFT) verifying client/service interactions for a particular feature.  And in some instances it may even mean, f**k it, ship it and see if it blows up in production (a rare occurrence of course).</p>

<p>It turns out that before I even started working on the mobile service, people before me were asking similar questions about testing their APIs, and they had come up with a slightly different type of test that we now call &ldquo;web tests&rdquo;.  A &ldquo;web test&rdquo; is basically a way to fire up an instance of the service for each test and, using a Jersey client, programmatically make calls to that service within the test itself.  This was great because it allowed us to write tests against our APIs without needing to fire up an external tool such as a web browser.  The following code is an example of such a test:</p>

<figure class='code'><figcaption><span>Basic web test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TestRestClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">createTestRestClient</span><span class="o">();</span>
</span><span class='line'><span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="err">“</span><span class="n">api</span><span class="o">/</span><span class="n">jobs</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="n">response</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code makes a call to retrieve a list of jobs and verifies the response status code is 200.</p>

<p>The idea of the “web” or “API test” was exactly what I needed.  This gave me a starting point.  But I knew these web tests could be improved upon, making it easier to test our APIs.  So I set about trying to figure out what I wanted for testing the mobile service and came up with a list of requirements.</p>

<h1>The requirements</h1>

<p>There were some requirements I wanted to establish that would help guide my decision-making process when writing web tests.  These requirements included the following:</p>

<ul>
<li>The tests should mimic how an iOS client would navigate the API</li>
<li>Anyone reading the test code should be able to easily understand what is being tested</li>
<li>The code should be easy to reuse, reducing duplication where possible</li>
</ul>


<p>These really aren’t groundbreaking ideas, but they were helpful to keep in mind at all times.  They served as guideposts throughout my decision-making process.  With these requirements defined, I&rsquo;m going to give you a quick rundown of some key elements of the API before diving into implementation details.</p>

<h1>The API</h1>

<p>The API for the mobile service is a RESTful API that uses <a href="http://en.wikipedia.org/wiki/HATEOAS">hypermedia as the engine of application state (HATEOAS)</a>.  We use the HTTP methods GET, DELETE, POST, and PUT against URLs representing resources.  Everything is stateless and we leverage headers for things such as authorization and versioning.  The following figure illustrates sample request and response against this API:</p>

<p><img class="center medium" src="http://dev.theladders.com/images/api-tests/api-request-response.png"></p>

<p>The above example illustrates a request for the details of an individual job.  One important thing to note here is the “links” element in the JSON.  This is the HATEOAS piece I mentioned earlier. If a user taps the “like” button on the app for this particular job, the client code would send a request to the URL associated with the “like” action.  If the job was already liked when it was retrieved, then an “unlike” link would have been present instead.</p>

<p>We use hypermedia links extensively in the API.  In fact, the only URL that is hard-coded in the iOS application is what we call a “bootstrap” URL.  This URL gives the client all of the hypermedia links needed to get started with the app, and would look something like the following:</p>

<figure class='code'><figcaption><span>Bootstrap JSON response</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;links&quot;</span> <span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;action&quot;</span> <span class="p">:</span> <span class="s2">&quot;authenticate&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uri&quot;</span> <span class="p">:</span> <span class="s2">&quot;https://localhost:54837/authenticate&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;action&quot;</span> <span class="p">:</span> <span class="s2">&quot;lookupIndustries&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uri&quot;</span> <span class="p">:</span> <span class="s2">&quot;https://localhost:54837/api/lookup/industries&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;action&quot;</span> <span class="p">:</span> <span class="s2">&quot;autocompleteTitle&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uri&quot;</span> <span class="p">:</span> <span class="s2">&quot;https://localhost:54837/api/autocomplete/title?q={toMatch}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;action&quot;</span> <span class="p">:</span> <span class="s2">&quot;register&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uri&quot;</span> <span class="p">:</span> <span class="s2">&quot;https://localhost:54837/register&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here, the client has the links for retrieving some lookup lists, maybe a URL for auto-completing the job title field, a link for logging in an existing user, and a link for registering a new user.  If the link to login is invoked, then new response JSON will be returned containing “links” for valid actions that user can perform, and so on and so forth.</p>

<p>There is more to the API and I’ve glossed over some details.  But this should give you enough of an idea of how things work to understand the implementation.</p>

<h1>The implementation</h1>

<p>It’s important to keep in mind that the following implementation has evolved over time.  What I present to you here is an example that identifies the key components of the current state.  I was always going back-and-forth with different ideas, trying out various implementations.  And I’m pretty certain the team will continue to iterate on what we have today.</p>

<p>But in its current state, the implementation has the following four components:</p>

<ol>
<li>Class representing request/response JSON</li>
<li>Class for performing asserts against a body of JSON</li>
<li>Class representing the actions that can be taken on a body of JSON (such as calling hypermedia links or accessing an item in a list)</li>
<li>Class representing a user, their state, and their “connection” to the API.</li>
</ol>


<p>These four components and how they relate to the API can be seen in the following figure:</p>

<p><img class="center medium" src="http://dev.theladders.com/images/api-tests/api-implementation-components.png"></p>

<p>In addition to these four components, I did my  best to provide some “syntactic sugar” for allowing us to write tests in the given/when/then style.  So let’s dive into each of the four components and give you some concrete examples to work with.</p>

<h2>Class representing request/response JSON</h2>

<p>We have what are called “representation” classes whose sole purpose is to “represent” incoming or outgoing JSON.  These classes are annotated with JAXB annotations for serialization/deserialization purposes.  These classes also have methods for accessing the hypermedia links (some of which may be optional).  So the following JSON:</p>

<figure class='code'><figcaption><span>Job JSON</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;details&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;title&quot;</span> <span class="p">:</span> <span class="s2">&quot;Software Engineer&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;company&quot;</span> <span class="p">:</span> <span class="s2">&quot;TheLadders&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;location&quot;</span> <span class="p">:</span> <span class="s2">&quot;New York, NY&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;postedOn&quot;</span> <span class="p">:</span> <span class="s2">&quot;2015-04-17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;salary&quot;</span> <span class="p">:</span> <span class="s2">&quot;$100k&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Work with us!&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;links&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;action&quot;</span> <span class="p">:</span> <span class="s2">&quot;like&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uri&quot;</span> <span class="p">:</span> <span class="s2">&quot;https://localhost:54837/api/jobs/e-1/like&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;action&quot;</span> <span class="p">:</span> <span class="s2">&quot;get&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uri&quot;</span> <span class="p">:</span> <span class="s2">&quot;https://localhost:54837/api/jobs/e-1&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Would be represented by a class that looks like:</p>

<figure class='code'><figcaption><span>JobRepresentation.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@XmlRootElement</span>
</span><span class='line'><span class="nd">@XmlAccessorType</span><span class="o">(</span><span class="n">XmlAccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JobRepresentation</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JobDetailRepresentation</span> <span class="n">details</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">HypermediaLinks</span> <span class="n">links</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">HypermediaLink</span><span class="o">&gt;</span> <span class="nf">likeLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">links</span><span class="o">.</span><span class="na">forAction</span><span class="o">(</span><span class="err">“</span><span class="n">like</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">HypermediaLink</span><span class="o">&gt;</span> <span class="nf">unlikeLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">links</span><span class="o">.</span><span class="na">forAction</span><span class="o">(</span><span class="err">“</span><span class="n">unlike</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">HypermediaLink</span> <span class="nf">getLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">links</span><span class="o">.</span><span class="na">forAction</span><span class="o">(</span><span class="err">“</span><span class="n">get</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The methods for the links are particularly useful when navigating the API in a way an actual client would in tests.  Having defined a class representing a body of JSON, let&rsquo;s move on to the class for performing assertions against this body of JSON.</p>

<h2>Class for performing asserts against a body of JSON</h2>

<p>Having a class for performing assertions against a particular body of JSON helps us achieve two goals:  1) write more expressive test code and 2) have assertions that can be reused across tests.  For example, there may be several tests that require asserting the title for a particular job returned by the API.  We may also want to verify the presence or absence of certain hypermedia links.  The following code illustrates an “asserts” class for a job representation.</p>

<figure class='code'><figcaption><span>JobRepresentationAsserts.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JobRepresentationAsserts</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">JobRepresentation</span> <span class="n">representation</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hasTitleOf</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">title</span><span class="o">,</span> <span class="n">representation</span><span class="o">.</span><span class="na">details</span><span class="o">.</span><span class="na">title</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hasLikeLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">representation</span><span class="o">.</span><span class="na">likeLink</span><span class="o">().</span><span class="na">isPresent</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doesNotHaveLikeLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">representation</span><span class="o">.</span><span class="na">likeLink</span><span class="o">().</span><span class="na">isPresent</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hasUnlikeLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">representation</span><span class="o">.</span><span class="na">unlikeLink</span><span class="o">().</span><span class="na">isPresent</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doesNotHaveUnlikeLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">representation</span><span class="o">.</span><span class="na">unlikeLink</span><span class="o">().</span><span class="na">isPresent</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In addition to these “asserts” classes, I created a class with static builder methods to provide some syntactic sugar.  This allows us to write our tests in a given/when/then fashion.  This builder class is as follows:</p>

<figure class='code'><figcaption><span>AssertsBuilder.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AssertsBuilder</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">JobRepresentationAsserts</span> <span class="nf">thenThe</span><span class="o">(</span><span class="n">JobRepresentation</span> <span class="n">representation</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">JobRepresentationAsserts</span><span class="o">(</span><span class="n">representation</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This results in something like the following in a test:</p>

<figure class='code'><figcaption><span>Sample job test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">theladders</span><span class="o">.</span><span class="na">AssertsBuilder</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">JobRepresentation</span> <span class="n">job</span> <span class="o">=</span> <span class="n">apiCallToGetJob</span><span class="o">();</span>
</span><span class='line'><span class="n">thenThe</span><span class="o">(</span><span class="n">job</span><span class="o">).</span><span class="na">hasTitleOf</span><span class="o">(</span><span class="err">“</span><span class="n">Software</span> <span class="n">Engineer</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">thenThe</span><span class="o">(</span><span class="n">job</span><span class="o">).</span><span class="na">hasLikeLink</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>We’re not there yet, but we’re making progress.  So far we have the following:</p>

<ul>
<li>Class for representing incoming/outgoing bodies of JSON</li>
<li>Class for performing assertions against a particular body of JSON</li>
<li>Some syntactic sugar for creating assert-related objects.</li>
</ul>


<p>The next piece of the puzzle is a class representing the actions that can be taken on a body of JSON.</p>

<h2>Class representing the actions that can be taken on a body of JSON</h2>

<p>What exactly do I mean by &ldquo;taking actions on a body of JSON&rdquo;.  &ldquo;Actions&rdquo; can include anything from selecting an individual item in a list (a job in a list of jobs) to calling a URL associated with a hypermedia link.  So why the need for a separate class encapsulating these &ldquo;actions&rdquo; when we already have a representation class for a body of JSON (which includes hypermedia links)?  The reason is rooted in the fact that our representation classes are used in production code for serialization purposes (a topic worthy of its own blog post), and I didn&rsquo;t want to mix in testing concerns with our representation classes for something like calling the API via TestRestClient.  So I decided to create a different type of class for this purpose.  I called this the &ldquo;actions&rdquo; class.</p>

<p>Let&rsquo;s take a look at JSON containing a list of jobs as an example.  If a user is viewing a list of jobs, it&rsquo;s reasonable to expect they might want to &ldquo;do something&rdquo; with a particular job.  This would be captured with something like the following:</p>

<figure class='code'><figcaption><span>JobListActions.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JobListActions</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">UserAndClient</span> <span class="n">userAndClient</span><span class="o">;</span> <span class="c1">// this class represents a user and their connection to the API and will be discussed next.</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JobListRepresentation</span> <span class="n">representation</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JobActions</span> <span class="nf">actingOnJobAtIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">JobActions</span><span class="o">(</span><span class="n">userAndClient</span><span class="o">,</span> <span class="n">representation</span><span class="o">.</span><span class="na">jobs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JobListActions by itself isn’t necessarily interesting, but it does provide a nice way for indicating what job a user is acting upon in a test.  The next code listing is more interesting, providing methods for performing various “actions” an individual job.</p>

<figure class='code'><figcaption><span>JobActions.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JobActions</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserAndClient</span> <span class="n">userAndClient</span><span class="o">;</span> <span class="c1">// this class represents a user and their connection to the API and will be discussed next</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">JobRepresentation</span> <span class="n">representation</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">JobRepresentation</span><span class="o">&gt;</span> <span class="nf">like</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">HypermediaLink</span><span class="o">&gt;</span> <span class="n">link</span> <span class="o">=</span> <span class="n">representation</span><span class="o">.</span><span class="na">likeLink</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Response</span><span class="o">&lt;&gt;(</span><span class="n">userAndClient</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">link</span><span class="o">.</span><span class="na">get</span><span class="o">()),</span> <span class="n">JobRepresentation</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">JobRepresentation</span><span class="o">&gt;</span> <span class="nf">unlike</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">HypermediaLink</span><span class="o">&gt;</span> <span class="n">link</span> <span class="o">=</span> <span class="n">representation</span><span class="o">.</span><span class="na">unlikeLink</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Response</span><span class="o">&lt;&gt;(</span><span class="n">userAndClient</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">link</span><span class="o">.</span><span class="na">get</span><span class="o">()),</span> <span class="n">JobRepresentation</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class contains methods for liking and un-liking a job.  This is done by using the TestRestClient found in UserAndClient (more on this next) to make calls to the API via the hypermedia links.  The Response class that is returned from these methods is a simple wrapper class for a JAX-RS response and looks like the following:</p>

<figure class='code'><figcaption><span>Response.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">javax</span><span class="o">.</span><span class="na">ws</span><span class="o">.</span><span class="na">rs</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">Response</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">responseBodyType</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">status</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">getStatus</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">T</span> <span class="nf">body</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">readEntity</span><span class="o">(</span><span class="n">responseBodyType</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we have all of these separate pieces:  1) representation class, 2) representation asserts class, and 3) class for performing actions against a representation.  By themselves, these three pieces really aren’t that useful.  We need something to pull them together.  This is where the UserAndClient alluded to earlier comes in.</p>

<h2>Class representing a user, their state, and their “connection” to the API</h2>

<p>This class is used for encapsulating a user and how they make calls to the API.  State for a particular user is kept here.  This class acts as the launching point for navigating through the API.  The code in the following listing provides methods for viewing job matches and being able to act upon the viewed job matches.</p>

<figure class='code'><figcaption><span>UserAndClient.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAndClient</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">AuthenticatedUserRepresentation</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">TestRestClient</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JobListRepresentation</span> <span class="n">jobMatches</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JobListRepresentation</span> <span class="nf">viewsJobMatches</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">HypermediaLink</span> <span class="n">link</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">jobMatchesLink</span><span class="o">();</span>
</span><span class='line'>    <span class="n">jobMatches</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">link</span><span class="o">).</span><span class="na">readEntity</span><span class="o">(</span><span class="n">JobListRepresentation</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jobMatches</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">JobListActions</span> <span class="nf">actingOn</span><span class="o">(</span><span class="n">JobListRepresentation</span> <span class="n">representation</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">JobListAction</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">representation</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With some additional syntactic sugar, we are able to use UserAndClient to write very expressive tests with decoupled and reusable components.  Our base test class provides this syntactic sugar:</p>

<figure class='code'><figcaption><span>RegisteredUserWebTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RegisteredUserWebTest</span> <span class="kd">extends</span> <span class="n">WebTest</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">UserAndClient</span> <span class="n">me</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">me</span> <span class="o">=</span> <span class="n">createNewUserAndClient</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">UserAndClient</span> <span class="nf">given</span><span class="o">(</span><span class="n">UserAndClient</span> <span class="n">userAndClient</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">userAndClient</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">UserAndClient</span> <span class="nf">when</span><span class="o">(</span><span class="n">UserAndClient</span> <span class="n">userAndClient</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">userAndClient</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are then able to put it all together in a test such as the following:</p>

<figure class='code'><figcaption><span>LikeJobWebTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LikeJobWebTest</span> <span class="kd">extends</span> <span class="n">RegisteredUserWebTest</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">likingJobReturnsResultWithUnlikeLink</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">given</span><span class="o">(</span><span class="n">me</span><span class="o">).</span><span class="na">viewsJobMatches</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Response</span><span class="o">&lt;</span><span class="n">JobRepresentation</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">when</span><span class="o">(</span><span class="n">me</span><span class="o">).</span><span class="na">actingOn</span><span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">jobMatches</span><span class="o">)</span>
</span><span class='line'>                                                   <span class="o">.</span><span class="na">actingOnJobAtIndex</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>                                                   <span class="o">.</span><span class="na">like</span><span class="o">();</span>
</span><span class='line'>    <span class="n">thenThe</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">hasStatusOfOk</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">JobRepresentation</span> <span class="n">job</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">();</span>
</span><span class='line'>    <span class="n">thenThe</span><span class="o">(</span><span class="n">job</span><span class="o">).</span><span class="na">doesNotHaveLikeLink</span><span class="o">();</span>
</span><span class='line'>    <span class="n">thenThe</span><span class="o">(</span><span class="n">job</span><span class="o">).</span><span class="na">hasUnlikeLink</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the above test, it’s pretty clear what is happening.  A user views their job matches.  From there, they like a single job in the list.  We are then verifying that the response of that like contains JSON without a like link (so they cannot “like” a job two times in a row).</p>

<h1>Conclusion</h1>

<p>Overall the results have been positive.  We have fairly reusable test code that minimizes duplication.  At first glance it may seem like a lot of unnecessary classes (representation asserts &amp; a class for encapsulating “actions”).  But creating these classes forces us to really think about the API as we develop.  An “asserts” class forces us to zero in on the needs of the client.  The “actions” class gives us a feel for whether or not we are providing the best API in terms of hypermedia links and navigating between URLs.</p>

<p>At the end of the day, we wanted something that would result in an API that met the needs of it’s customer (the iOS client), and I think we’ve achieved that.  By “eating our own dog food” via navigating the hypermedia links in our web tests, we are putting ourselves in the shoes of the iOS client, and the result has been increased test coverage with tests that are easy to extend and understand.</p>

<p>Hopefully you have found this useful.  I realize I&rsquo;ve glossed over some of the finer details, such as &ldquo;what is actually inside of the TestRestClient&rdquo; class?  This blog post wasn&rsquo;t meant to give you the exact template for doing what we do here at TheLadders.  It was meant to get you thinking about how you are testing your APIs and possible ways to improve upon how that is done.  I&rsquo;m sure what we have today will look much different six months for now.  While not perfect, it has resulted in what I think are more stable APIs, and at the end of the day, that&rsquo;s a win in my book.</p>

<p>Now time to go test that new Storm topology of mine in production and see if it works&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CasperJS the Friendly Testing Framework]]></title>
    <link href="http://dev.theladders.com/2015/03/casperjs-the-friendly-testing-framework/"/>
    <updated>2015-03-25T16:30:00-04:00</updated>
    <id>http://dev.theladders.com/2015/03/casperjs-the-friendly-testing-framework</id>
    <content type="html"><![CDATA[<blockquote><p>If you don&#8217;t like testing your product, most likely your customers won&#8217;t like to test it either.</p><footer><strong>&#8211; Anonymous</strong></footer></blockquote>


<p>When we started our new <a href="https://www.theladders.com/careers/search">job market guide</a>
project (a site where career-minded professionals can check out open positions
and stats such as average compensation), the question of testing came up pretty
quickly. We had used <a href="http://jasmine.github.io/">Jasmine</a> for
JavaScript unit testing on a previous project so we kept using it, but it wasn&rsquo;t enough.
Our Jasmine tests could pass, but the site might not actually work. We needed
end-to-end tests.</p>

<p>One of the new tools we found was <a href="http://casperjs.org/">CasperJS</a>. It&rsquo;s a neat
JavaScript project that uses <a href="http://phantomjs.org/">PhantomJS</a> to open a headless
browser, go to your site, take some actions and then make assertions. We&rsquo;re using
CasperJS for end-to-end testing and we&rsquo;re automating the test runs with
<a href="http://gruntjs.com/">Grunt</a>.</p>

<p>Here&rsquo;s a snippet of a test for our &lsquo;share&rsquo; feature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">emailCaptureTopFormTest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">givenCareersPage</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">whenEmailFormIsFilledOut</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">thenConfirmationIsShown</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">givenCareersPage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">DOMAIN</span> <span class="o">+</span> <span class="s1">&#39;careers/NY/sales/1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">whenEmailFormIsFilledOut</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s1">&#39;[data-js=&quot;email-capture__top-link-test&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="nx">topFormInputSelector</span><span class="p">,</span> <span class="s1">&#39;jblocktest&#39;</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;@theladders.net&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s1">&#39;[data-js=&quot;email-capture__top-submit&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">thenConfirmationIsShown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">casper</span><span class="p">.</span><span class="nx">waituntilVisible</span><span class="p">(</span><span class="s1">&#39;[data-js=&quot;email-capture__confirmation&quot;]&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">util</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">&quot;email confirmation ok&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">util</span><span class="p">.</span><span class="nx">failWithScreenshot</span><span class="p">(</span><span class="s2">&quot;email-confirmation-fail&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="s2">&quot;email confirmation didn&#39;t appear&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">SCREENSHOT_OPTIONS</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The test opens up the page, fills out the form, and makes sure the confirmation
window appears. If it doesn&rsquo;t appear, the test takes a screenshot and reports a failure.</p>

<p>The tests are generally pretty fast. We use Grunt to kick off the test suites
so that all you need to do to run them is type <code>grunt test</code>. (That&rsquo;s a lot
easier to remember than <code>casperjs --ssl-protocol=any --ignore-ssl-errors=true
test path/to/tests</code>!) Simpler tests are typically less than a second to run,
but there are a few slower tests that rely on external services, which can
take as long as 15 seconds to run. This led to concerns about the test run
time. We want to run the whole suite of tests frequently, but we don&rsquo;t want it
to take a couple of minutes each time.</p>

<p>The solution I went with was running them in parallel. They&rsquo;re all independent
so there&rsquo;s no need for any test to wait for any other test to finish. CasperJS
doesn&rsquo;t officially support parallelization so I jury-rigged something together
with a shell script. It gets each test file, runs them all as background processes
and redirects their output to temporary files. Once that&rsquo;s done, it cats all the
output in order and then uses <code>grep</code> to print failures at the end.</p>

<p>Here&rsquo;s some sample output after the test suite has run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Test file: /casper/tests/no_search_results_test.js
</span><span class='line'># search no results test
</span><span class='line'>PASS no-jobs-search-ok: Saw no jobs container
</span><span class='line'>PASS 1 test executed in 2.227s, 1 passed, 0 failed, 0 dubious, 0 skipped.
</span><span class='line'>
</span><span class='line'>Done, without errors.
</span><span class='line'>*********************************
</span><span class='line'>
</span><span class='line'>FAIL PremiumSignupTestfail:  Expected pricing form. Didn&#39;t see it.
</span><span class='line'>#    file: /casper/tests/premium_signup_test.js
</span><span class='line'>FAIL 1 test executed in 13.195s, 0 passed, 1 failed, 0 dubious, 0 skipped.
</span><span class='line'>
</span><span class='line'>real  0m25.646s
</span><span class='line'>user  1m16.980s
</span><span class='line'>sys   0m7.416s
</span><span class='line'>^ Time it took for this task.
</span></code></pre></td></tr></table></div></figure>


<p>I used the <code>time</code> command to print out how long the suite takes. It&rsquo;s now
around 25s instead of 90s+. That is, the run time is the slowest test&rsquo;s run
time plus some overhead. That&rsquo;s a big improvement over the sum of all the tests&#8217;
 run times!</p>

<p>This was great when we only had a few tests, but as the suite grew larger, I
noticed the server was starting to struggle. It could handle five connections
 opening at once, but a hundred was causing tests to time out. My solution for
this was to split the tests into smaller batches. Instead of running 100 tests
all at once and bringing the server down, I can run two sets of 50. It&rsquo;s a
little slower than it would be if they could all run at once, but it&rsquo;s definitely
faster than having some tests randomly time out and fail.</p>

<p>Now that the casper tests are quick and easy to run, they&rsquo;re being used more
frequently and catching errors faster. Some developers are writing casper tests
before they write the actual code, too.</p>

<p>While CasperJS is a great tool for testing interactions and catching errors (like
forms not submitting correctly), it doesn&rsquo;t particularly care about how the page
looks. The casper tests will happily pass even if no CSS loads on the page. A
human would obviously see something is broke, but the casper tests won&rsquo;t. We
wanted to be able to catch problems like that without manually looking at
every page. Fortunately, there&rsquo;s a tool for that:
<a href="https://github.com/Huddle/PhantomCSS">PhantomCSS</a>.</p>

<p>PhantomCSS builds on top of CasperJS. It takes screenshots of your
site and then after you&rsquo;ve done work, it takes new screenshots. It then compares
the two and highlights any changes. This can be incredibly useful. For example,
suppose you&rsquo;re changing the header on one pager to be centered. If this accidentally
center headers on other pages, that will show up as a failure in PhantomCSS.</p>

<p>Since PhantomCSS tests run the same way as the casper tests, I was able to use the
same method to run them in parallel. Like with casper tests, individually they&rsquo;re
pretty quick, but running them all sequentially can be slow. Running them in
parallel is a big time saver.</p>

<p>Now that we are using CasperJS and PhantomJS, our confidence when releasing has
gone way up. We no longer need to manually check styles on every page because
PhantomCSS will show us every change. We don’t need to click through flows because
CasperJS does that for us. We&rsquo;ve been releasing new bug-free features at a consistent
rate that wouldn&rsquo;t be possible if we were still manually testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conclave]]></title>
    <link href="http://dev.theladders.com/2015/02/conclave/"/>
    <updated>2015-02-13T13:13:00-05:00</updated>
    <id>http://dev.theladders.com/2015/02/conclave</id>
    <content type="html"><![CDATA[<blockquote><p>For once in my life I&#8217;ve got something to say<br/> I wanna say it now for now is today<br/> A love has been given so why not enjoy<br/> So let&#8217;s all grab and let&#8217;s all enjoy</p><footer><strong>&#8211; Sham 69 &#8220;If The Kids Are United&#8221;</strong></footer></blockquote>


<h2>If We All Stand Together It Will Just Be A Start</h2>

<p>Our engineering culture at TheLadders celebrates curiosity, teamwork and knowledge sharing.  The very nature of the loosely-coupled systems that we&rsquo;re building leads to a tendency for our teams to become isolated from each other.  We look to Friday Conclave to combat our isolation and stimulate our collective intellectual curiosity.</p>

<p>What is Friday Conclave you ask?  It&rsquo;s a chance for our engineers to learn something outside of their day-to-day work.  It&rsquo;s an opportunity for us to reconnect as a larger team.  It&rsquo;s a venue for us to share our intellectual curiosity with our colleagues.  Occasionally, it&rsquo;s a means for us to share domain knowledge and keep everyone in the loop on each group&rsquo;s direction and progress.</p>

<h2>Freedom Is Given, Speak How You Feel</h2>

<p>The format of Friday Conclave isn&rsquo;t set in stone, but the sessions tend to fall into one of the following categories:</p>

<ul>
<li>focused talk</li>
<li>lightning talks</li>
<li>very special guest</li>
<li>video with discussion</li>
<li>round table</li>
</ul>


<h3>Focused Talks</h3>

<p>Our longer talks are often the result of someone learning something in the course of doing their job, and then sharing it with the rest of the team.  The talks generally last 45 minutes to an hour and include a question and answer period at the end. Recently an engineer told the story of a bug that he found and fixed that involved a complex interaction between our caching system and one of our business rules. In the process of preparing for the talk he learned even more about the system as he worked out how to explain the issue to people who may not have been familiar with the parts involved.  Past talks have included an overview of HTTP by <a href="http://dev.theladders.com/ourteam/kylewinter">Kyle Winter</a> and a preview of an upcoming <a href="https://twitter.com/paperswelovenyc">Papers We Love NYC</a> talk on the <a href="https://github.com/papers-we-love/papers-we-love/blob/master/garbage_collection/incremental_mature_garbage_collection_using_the_train_algorithm.pdf?raw=true">Train Algorithm</a> by <a href="http://dev.theladders.com/ourteam/andrewturley">Andrew Turley</a>.</p>

<p>Some of our focused talks have nothing to do with people&rsquo;s current work.  Our engineering team comes from an astonishingly wide variety of backgrounds and team members routinely draw on their prior experience or research as conclave topics.  <a href="http://www.linkedin.com/in/shanioffen">Shani Offen</a> has spoken to the team about Dimensionality Reduction, Singular Value Decompositions, Eigenvectors, and Principal Component Analysis and <a href="http://dev.theladders.com/ourteam/wamiqahmed">Wamiq Ahmed</a> shared his <a href="http://www.ncbi.nlm.nih.gov/pubmed/23060342">NIH research</a> into the Classification of Bacterial Contamination.</p>

<h3>Lightning Talks</h3>

<p>Lightning talks are ten minute talks about any topic. We&rsquo;ve had people present on topics as ranging from great figures in the history of science, and the evolution of soccer defensive formations, to esoteric programming languages, and Hindu guilt. As with the focused talks, lightning talks vary greatly in their style and format. Sometimes an attempt is made to bring the topic of discussion back around to software engineering, but more often than not they serve as windows into the way our fellow engineers think and the things they hold dear.</p>

<h3>Very Special Guests</h3>

<p>From time to time we bring in guest presenters &mdash; engineers from outside the company who talk about their experience and expertise. <a href="http://whilefalse.blogspot.com/">Camille Fournier</a> of <a href="https://www.renttherunway.com/rtr_home">Rent the Runway</a> spoke to us about <a href="http://zookeeper.apache.org/">Zookeeper</a>, and <a href="https://twitter.com/zeeshanlakhani">Zeeshan Lakhani</a> gave a presentation on how he and his coworkers have used property-based testing in <a href="http://clojure.org">Clojure</a>. These are great ways to meet other engineers and it introduces us to skills and practices with which we may not be familiar.</p>

<h3>Videos with Discussion</h3>

<p>When we discover a talk that we feel is relevant to our work, we&rsquo;ll occasionally watch the video together and discuss as a group.  This is particularly applicable when someone returns from a conference and one of the presentations really stuck with them.  Past examples include Jeff Dean&rsquo;s talk from Ricon West 2013, <a href="https://www.youtube.com/watch?v=C_PxVdQmfpk">The Tail at Scale: Achieving Rapid Response Times in Large Online Services</a> and Donald Reinertsen&rsquo;s talk from Lean Software and Systems Conference 2012, <a href="http://vimeo.com/45947817">Decentralizing Control: How Aligned Initiative Conquers Uncertainty</a>.</p>

<h3>Round Table</h3>

<p>Sometimes we don&rsquo;t have an agenda. This isn&rsquo;t a bad thing. We still sit down and talk. If people are feeling particularly reticent we may start by going around and asking everyone to say something about one thing they worked on that week. Other times someone will come in with a story, a complaint, a question, or an issue that needs addressing. Early last year a few of us were trying to figure out how to deal with content caching on our new website. Since ops, platform, and the website team were all sitting there together we decided to hash out the details. Three hours later we emerged with a plan.</p>

<h2>Understand Them and They&rsquo;ll Understand You</h2>

<p>Friday Conclave is an excellent manifestation of the engineering culture here at TheLadders.  It provides us a forum to discuss how we build our products, explore new ideas, share points of view, learn about new and &ldquo;new-to-us&rdquo; technologies, and engage face-to-face rather than keyboard-to-keyboard.  We always welcome guest presenters and participants.  If you&rsquo;d like to attend or present at one of our Friday Conclaves in the future, let us know <a href="https://twitter.com/theladdersdev">@TheLaddersDev</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MMR is not Measles, Mumps, and Rubella]]></title>
    <link href="http://dev.theladders.com/2015/01/not-measles/"/>
    <updated>2015-01-22T15:58:00-05:00</updated>
    <id>http://dev.theladders.com/2015/01/not-measles</id>
    <content type="html"><![CDATA[<blockquote><p>Communication Breakdown, It&#8217;s always the same,<br/>I&#8217;m having a nervous breakdown, Drive me insane!</p><footer><strong>&#8211;Led Zeppelin</strong></footer></blockquote>


<p>tl;dr &mdash; Use this <a href="http://github.com/TheLadders/monitor-ds-replication">plugin</a> to monitor 389 Directory Server replication</p>

<p>We&rsquo;ve been bitten in the past when the multi-master replication between our authentication servers stops functioning properly and we don&rsquo;t find out about it immediately.  This usually manifests itself as users complaining that they&rsquo;re intermittently unable to authenticate against certain services, which results in a bunch of troubleshooting effort only to discover that the real problem is the user not existing on all IPA servers.</p>

<p>We use <a href="http://freeipa.org">freeIPA</a> internally as our centralized user management system.  freeIPA combines several standard open source components to provide an &ldquo;integrated security information management solution&rdquo;.  These components include <a href="http://directory.fedoraproject.org/">389 Directory Server</a>, <a href="http://k5wiki.kerberos.org/wiki/Main_Page">MIT Kerberos</a>, <a href="http://www.ntp.org">NTP</a>, <a href="http://fedorahosted.org/bind-dyndb-ldap/">DNS</a>, <a href="http://pki.fedoraproject.org/">Dogtag certificate system</a>, <a href="http://fedorahosted.org/sssd/">SSSD</a> as well as several others.  In the absence of custom configuration, freeIPA utilizes two instances of 389 Directory Server &ndash; one for traditional directory information on the standard port 389, and one for <a href="http://en.wikipedia.org/wiki/Public_key_infrastructure">PKI/CA</a> on port 7389.  389 Directory Server&rsquo;s multi-master replication (MMR) support ensures that directory and certificate data is available from any node in the cluster.</p>

<p>To prevent this unfortunate scenario in the future, we developed a simple <a href="http://www.nagios.org">nagios</a>/<a href="http://www.icinga.org">icinga</a> plugin to assess replication health within the 389 Directory Server cluster.  Fortunately, information including structure of the cluster and status of replication is stored within the LDAP schema itself.  In developing the plugin, we hoped to avoid storing any authentication details in the plugin or the nagios/icinga configuration.  This required enabling anonymous read-only querying of the replication agreement data.  Daniel James Scott&rsquo;s <a href="http://danieljamesscott.org/11-articles/application-guides/26-freeipa-replication-monitoring.html">blog post</a> provided very clear instructions for enabling anonymous read/search/compare access to the replication agreements.  Our <a href="http://github.com/TheLadders/monitor-ds-replication">plugin</a> uses the <a href="http://rubygems.org/gems/net-ldap">Net::LDAP</a> Ruby gem to interact with a 389 Directory Server instance to discover all of the downstream replicas and their respective status.  We query the ldap server with base <code>cn=config</code> and filter on <code>(objectclass=nsds5replicationagreement)</code>.  The equivalent command line query is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ldapsearch -x -h openldap_server.example.com -b cn=config '(objectclass=nsds5replicationagreement)'</span></code></pre></td></tr></table></div></figure>


<p>This yields data similar to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># extended LDIF
</span><span class='line'>#
</span><span class='line'># LDAPv3
</span><span class='line'># base &lt;cn=config&gt; with scope subtree
</span><span class='line'># filter: (objectclass=nsds5replicationagreement)
</span><span class='line'># requesting: ALL
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'># meToipa-1.example.com, replica, dc\3Dexample\2Cdc\3com, mapping tree, config
</span><span class='line'>dn: cn=meToipa-1.example.com,cn=replica,cn=dc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config
</span><span class='line'>cn: meToipa-1.example.com
</span><span class='line'>objectClass: nsds5replicationagreement
</span><span class='line'>objectClass: top
</span><span class='line'>nsDS5ReplicaTransportInfo: LDAP
</span><span class='line'>description: me to ipa-1.example.com
</span><span class='line'>nsDS5ReplicaRoot: dc=example,dc=com
</span><span class='line'>nsDS5ReplicaHost: ipa-1.example.com
</span><span class='line'>nsds5replicaTimeout: 120
</span><span class='line'>nsDS5ReplicaPort: 389
</span><span class='line'>nsDS5ReplicatedAttributeList: (objectclass=*) $ EXCLUDE memberof idnssoaserialentryusn krblastsuccessfulauth krblastfailedauth krbloginfailedcount
</span><span class='line'>nsDS5ReplicaBindMethod: SASL/GSSAPI
</span><span class='line'>nsDS5ReplicatedAttributeListTotal: (objectclass=*) $ EXCLUDE entryusn krblastsuccessfulauth krblastfailedauth krbloginfailedcount
</span><span class='line'>nsds5replicareapactive: 0
</span><span class='line'>nsds5replicaLastUpdateStart: 20150121214458Z
</span><span class='line'>nsds5replicaLastUpdateEnd: 20150121214501Z
</span><span class='line'>nsds5replicaChangesSentSinceStartup:: MTM6MjAwMzUxNy8wIDY6NC8wIDE0OjQ0MjkvMCA=
</span><span class='line'>nsds5replicaLastUpdateStatus: 1 Can't acquire busy replica
</span><span class='line'>nsds5replicaUpdateInProgress: FALSE
</span><span class='line'>nsds5replicaLastInitStart: 0
</span><span class='line'>nsds5replicaLastInitEnd: 0
</span><span class='line'>
</span><span class='line'># meToipa-2.example.com, replica, dc\3Dexample\2Cdc\3Dcom, mapping tree, config
</span><span class='line'>dn: cn=meToipa-2.example.com,cn=replica,cn=dc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config
</span><span class='line'>cn: meToipa-2.example.com
</span><span class='line'>objectClass: nsds5replicationagreement
</span><span class='line'>objectClass: top
</span><span class='line'>nsDS5ReplicaTransportInfo: LDAP
</span><span class='line'>description: me to ipa-2.example.com
</span><span class='line'>nsDS5ReplicaRoot: dc=example,dc=com
</span><span class='line'>nsDS5ReplicaHost: ipa-2.example.com
</span><span class='line'>nsds5replicaTimeout: 120
</span><span class='line'>nsDS5ReplicaPort: 389
</span><span class='line'>nsDS5ReplicatedAttributeList: (objectclass=*) $ EXCLUDE memberof idnssoaserialentryusn krblastsuccessfulauth krblastfailedauth krbloginfailedcount
</span><span class='line'>nsDS5ReplicaBindMethod: SASL/GSSAPI
</span><span class='line'>nsDS5ReplicatedAttributeListTotal: (objectclass=*) $ EXCLUDE entryusn krblastsuccessfulauth krblastfailedauth krbloginfailedcount
</span><span class='line'>nsds5replicareapactive: 0
</span><span class='line'>nsds5replicaLastUpdateStart: 20150121214628Z
</span><span class='line'>nsds5replicaLastUpdateEnd: 0
</span><span class='line'>nsds5replicaChangesSentSinceStartup:: Njo0MzEyLzAgMTM6NDAzMjMzOS8wIA==
</span><span class='line'>nsds5replicaLastUpdateStatus: 0 Replica acquired successfully: Incremental update started
</span><span class='line'>nsds5replicaUpdateInProgress: TRUE
</span><span class='line'>nsds5replicaLastInitStart: 20141215154802Z
</span><span class='line'>nsds5replicaLastInitEnd: 20141215154807Z
</span><span class='line'>nsds5replicaLastInitStatus: 0 Total update succeeded
</span><span class='line'>
</span><span class='line'># search result
</span><span class='line'>search: 2
</span><span class='line'>result: 0 Success
</span><span class='line'>
</span><span class='line'># numResponses: 3
</span><span class='line'># numEntries: 2</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re primarily concerned with how far in the past each replica successfully performed an update.  As you can see from the output above, the replication agreement with ipa-2.example.com is in the middle of an incremental update and shows a last update end of <code>0</code>.  This does not necessarily mean that replication is broken.  For better or worse, when the server begins an update, it clears the last end time.  To avoid constantly alerting when we&rsquo;re unable to retrieve meaningful replication data, the plugin maintains a state file that tracks the last valid update completion time and how many times a check has resulted in a last update completion of <code>0</code>.  The number of successive zero responses and acceptable number of minutes since last successful update completion are configurable parameters with the ability to set distinct warning and critical thresholds.</p>

<p>Since putting this monitoring in place, we&rsquo;ve moved to newer freeIPA servers using replication to seamlessly migrate data from the old servers to the new.  This plugin has already served to identify a breakdown in our replication that was easily remedied because the nodes had not yet significantly diverged.  Other aspects of the health and performance of the IPA cluster are available via SNMP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipes, Tubes, and Email]]></title>
    <link href="http://dev.theladders.com/2014/11/pipes-tubes-and-email/"/>
    <updated>2014-11-18T09:00:00-05:00</updated>
    <id>http://dev.theladders.com/2014/11/pipes-tubes-and-email</id>
    <content type="html"><![CDATA[<blockquote><p>It&#8217;s not a big truck.  It&#8217;s a series of tubes.  And if you don&#8217;t understand, those tubes can be filled and if they are filled, when you put your message in, it gets in line and it&#8217;s going to be delayed.</p><footer><strong>&#8211;US Senator Ted Stevens (R-Alaska)</strong></footer></blockquote>


<h2>Plumbing 101</h2>

<p>Sending email is a major part of our business.  Over the years, TheLadders has moved through several iterations of getting emails out to our millions of job seekers and recruiters.  We&rsquo;ve both built in-house solutions and utilized <a href="http://en.wikipedia.org/wiki/Email_service_provider_(marketing)">Email Service Providers (ESPs)</a>.</p>

<p>Recently, we transitioned onto a new ESP, <a href="http://sendgrid.com">SendGrid</a>.  SendGrid offers us the choice of handing off email via their <a href="https://sendgrid.com/docs/API_Reference/Web_API/index.html">HTTP</a> or <a href="https://sendgrid.com/docs/API_Reference/SMTP_API/index.html">SMTP</a> APIs.  We selected <a href="http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol">SMTP</a> as our transport mechanism because it allows us the luxury of inserting a layer in our infrastructure to handle queueing and resilience of mail transport before handing messages across to the ESP.  We are also able to achieve higher overall throughput with SMTP than would be possible with the HTTP API.  We&rsquo;re using <a href="http://www.postfix.org">Postfix</a> as our mail transport agent because of its scalability properties, the flexibility of its configuration options and our team&rsquo;s familiarity with running and maintaining the application.</p>

<p>To ensure that our subscribers receive the emails we send them, we divide the different types of messages across multiple sub-user accounts at SendGrid.  This spreads our outbound email across different source IPs depending on the chosen sub-user account and allows us to control the reputation of each IP group.  In addition to the usual challenges that go along with deploying any new infrastructure &mdash; monitor it, scale it, make it highly available &mdash; SendGrid&rsquo;s use of SMTP authentication credentials to determine which sub-user account will handle the sending of a particular message created a new and interesting problem to solve.  How could we allow our application to instruct Postfix which sub-user account to use without building a Postfix cluster for each sub-user account?  Moreover, how could we make that process invisible to our end recipient?</p>

<h2>Don&rsquo;t Clog the Tubes!</h2>

<p>The majority of our email traffic is created by various <a href="http://dev.theladders.com/categories/storm/">Storm</a> topologies crunching through our data.  Storm provides the ability to parallelize each step in the process, resulting in fairly rapid generation of email traffic.  We utilize our F5 load balancers in front of a pool of Postfix servers to make our mail transport layer both fault-tolerant and scalable.  During our larger sends, we prefer messages to be sent out with minimal queueing.  We&rsquo;ve found after tuning that we can sustain roughly 7000 messages per second through a single Postfix server before messages begin to queue.  We can easily scale out to additional Postfix servers behind the load balancer to increase our total throughput.</p>

<p><img class="center medium" src="http://dev.theladders.com/images/pipes-tubes-and-email/animated_email_flow.gif"></p>

<h2>Pick a Tube</h2>

<p>Postfix provides the <a href="http://www.postfix.org/postconf.5.html#smtp_sasl_password_maps">SASL Password Map</a> mechanism to look up SMTP credentials based on remote hostname or domain.  When coupled with <a href="http://www.postfix.org/postconf.5.html#smtp_sender_dependent_authentication">Sender-dependent Authentication</a>, that lookup can be performed based on the sender address.  We leveraged this combination of options along with <a href="http://tools.ietf.org/html/rfc5233#page-2">plus-sign subaddressing</a> to encode the sub-user account in the message&rsquo;s source address, so an email from <code>user@example.com</code> would actually be sent from <code>user+account@example.com</code>.</p>

<p>We utilize a regular expression map for the password selection that matches the subaddress portion of the sender address and returns the appropriate sub-user account credentials to postfix, with a default for messages that come through without a subaddress.</p>

<figure class='code'><figcaption><span>SASL Password Map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^.*\+user1@example.com$/   user1:password1
</span><span class='line'>/^.*\+user2@example.com$/   user2:password2
</span><span class='line'>/^.*$/                      defaultuser:defaultpassword</span></code></pre></td></tr></table></div></figure>


<p><span class='caption-wrapper center medium'><img class='caption' src='http://dev.theladders.com/images/pipes-tubes-and-email/pick-a-tube.jpg' width='' height='' alt='[Photo](https://www.flickr.com/photos/biscuitsmlp/2431615179) by [smlp.co.uk](https://www.flickr.com/photos/biscuitsmlp/) / [CC BY 2.0](http://creativecommons.org/licenses/by/2.0/)' title='[Photo](https://www.flickr.com/photos/biscuitsmlp/2431615179) by [smlp.co.uk](https://www.flickr.com/photos/biscuitsmlp/) / [CC BY 2.0](http://creativecommons.org/licenses/by/2.0/)'><span class='caption-text'><a href="https://www.flickr.com/photos/biscuitsmlp/2431615179">Photo</a> by <a href="https://www.flickr.com/photos/biscuitsmlp/">smlp.co.uk</a> / <a href="http://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a></span></span></p>

<h2>Keep Your Tubes Straight</h2>

<p>While our solution works great for allowing our applications to properly route messages to the correct sub-user account, it doesn&rsquo;t necessarily provide the best customer facing appearance.  Our customers don&rsquo;t care what ESP we use, how we perform our sub-user account selection, or which sub-user account sourced their email.  Furthermore, a sudden change in source email address could cause our messages to be filtered incorrectly on the recipient side.  Perhaps a customer has a filter in place to always drop our messages into a specific folder for them to read later.  Maybe they have a strict policy stating that only mail from known addresses will end up in their inbox.  We periodically have to adjust how our outbound email is processed and we have to make those changes as transparent as possible for our customers.  To that end, we are also utilizing Postfix&rsquo;s address rewriting capabilities to ensure that our email source addresses remain consistent.</p>

<p>Postfix provides several opportunities and methods to transform email envelope information <a href="http://www.postfix.org/ADDRESS_REWRITING_README.html">for a variety of purposes</a>.  Our requirement was to transform messages sent from <code>user+account@example.com</code> so that the customer sees the message sourced from <code>user@example.com</code>.  <a href="http://www.postfix.org/postconf.5.html#sender_canonical_maps">Sender canonical maps</a> initially seemed like the ideal solution to this problem.  It worked perfectly to transform the sender address as desired however, the transformation occurred so early in the process that addresses were being rewritten before the subaccount selection was performed.  We finally settled on <a href="http://www.postfix.org/postconf.5.html#smtp_generic_maps">SMTP generic maps</a> as the correct solution since it performs its transformation when mail leaves the machine via SMTP, after all other processing has taken place.  We again use a regular expression to strip the subaccount information from source addresses.</p>

<figure class='code'><figcaption><span>SMTP Generic Map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^(.*)\+(.*)@(.*)$/ ${1}@${3}</span></code></pre></td></tr></table></div></figure>


<p><span class='caption-wrapper center medium'><img class='caption' src='http://dev.theladders.com/images/pipes-tubes-and-email/the-internet.jpg' width='' height='' alt='[Photo](https://www.flickr.com/photos/wheresmysocks/205710716) by [Kendrick Erickson](https://www.flickr.com/photos/wheresmysocks/) / [CC BY 2.0](http://creativecommons.org/licenses/by/2.0/)' title='[Photo](https://www.flickr.com/photos/wheresmysocks/205710716) by [Kendrick Erickson](https://www.flickr.com/photos/wheresmysocks/) / [CC BY 2.0](http://creativecommons.org/licenses/by/2.0/)'><span class='caption-text'><a href="https://www.flickr.com/photos/wheresmysocks/205710716">Photo</a> by <a href="https://www.flickr.com/photos/wheresmysocks/">Kendrick Erickson</a> / <a href="http://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a></span></span></p>

<h2>Pipes or Tubes</h2>

<p>Pulling it all together with the <a href="https://sendgrid.com/docs/Integrate/Mail_Servers/postfix.html">recommended Postfix config</a> from SendGrid, results in <code>/etc/postfix/main.cf</code> containing:</p>

<figure class='code'><figcaption><span>main.cf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>smtp_sasl_auth_enable = yes
</span><span class='line'>smtp_sender_dependent_authentication = yes
</span><span class='line'>smtp_sasl_password_maps = pcre:/path/to/sasl_password_map
</span><span class='line'>smtp_generic_maps = pcre:/path/to/smtp_generic_map
</span><span class='line'>smtp_sasl_security_options = noanonymous
</span><span class='line'>smtp_tls_security_level = encrypt
</span><span class='line'>header_size_limit = 4096000</span></code></pre></td></tr></table></div></figure>


<p>Find this post interesting? Join the discussion over on <a href="https://news.ycombinator.com/item?id=8623846">Hacker News</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding Up R]]></title>
    <link href="http://dev.theladders.com/2014/10/speeding-up-r/"/>
    <updated>2014-10-02T14:51:51-04:00</updated>
    <id>http://dev.theladders.com/2014/10/speeding-up-r</id>
    <content type="html"><![CDATA[<p>If you ever speak to a data scientist about what tools they use, you’re sure to hear a whole slew of complaints about how slow R can be. R is a programming language used for data processing, analysis, model building, and data visualization. It isn’t really designed for speed and most statistics courses don’t spend much time teaching students how to make their code run quicker.</p>

<p>A few months ago, we encountered this issue directly. We started working on an algorithm that would analyze any one of our six million jobseekers and find other jobseekers that they’re most similar to. To come up with this list, we’d look through several of the data points we had about the jobseeker, such as their career history and which jobs on our site they had been interested in, and looked for other members who had a similar set of data points. Our first pass at this algorithm in R took about thirty seconds to run for each jobseeker. If we wanted to run it for all six million of our users… well, we couldn’t really wait until 2019 to see the results. We’ve spent the subsequent few weeks speeding up the process so that it now takes less than half a second per jobseeker, and we’ve learned a bunch of helpful tips along the way.</p>

<p>(Note: Whenever I need to speed up my code, I look back at Hadley Wickham’s <a href="http://adv-r.had.co.nz/Performance.html">Advanced R</a> which is where a lot of these ideas come from and is a fantastic resource.)</p>

<h3>1. Use lineprof to find the bottleneck</h3>

<p>Hadley Wickham created a <a href="https://github.com/hadley/lineprof">useful and easy to use package</a> that you can use to figure out which part of your code is causing the biggest issues and drill down to the specific lines that are taking up most of the runtime. Figuring out which parts of your code are problematic is the first step towards fixing that problem.</p>

<h3>2. Attack the slowest cases, but don’t forget about the rest</h3>

<p>After making some improvements, we found that our algorithm could take anywhere between 0.5 and 6 seconds to run on a jobseeker. For the next iteration, we focused on the slowest 10% and tried to speed each of them up by 1-2 seconds. We repeated this process a few more times, taking a look at the slowest cases and seeing if we could make some big improvements there. However, we also stumbled on an easier but equally effective approach: making small improvements that impact all cases. Speeding up the process by 0.2 seconds for all jobseekers has the same impact of cutting off 2 seconds from just 10% of jobseekers and may be easier to do.</p>

<h3>3. Using data.table can speed up almost any merge or aggregation</h3>

<p>Our algorithm requires merging together a bunch of big data frames (for example, ones covering hundreds of thousands of user clicks or job applications) so we quickly searched for a package that could speed things up. We found the <a href="http://datatable.r-forge.r-project.org/">data.table package</a> which was orders of magnitude quicker than the base merge in some cases. However, we realized that there was no reason to limit our use of data.table as speed improvements could be found even on merges of much smaller data frames. Furthermore, any time we needed to run an aggregation over a data frame (usually done with aggregate or tapply), data.table could cut out valuable milliseconds.</p>

<h3>4. Use microbenchmark to rigorously test out your code</h3>

<p>The <a href="http://cran.r-project.org/web/packages/microbenchmark/index.html">microbenchmark package</a> is a far better way to test your R code’s speed than the standard system.time function. Microbenchmark runs each line of code you give it 100 times (by default) and computes summary statistics of those runtimes, allowing you to be confident that any speed improvements you find are not merely the result of random variation.</p>

<h3>5. Don’t overfit to a single case</h3>

<p>Good data scientists are cognizant of the tradeoff between training error and test error when building a model. A similar phenomenon can occur when trying to optimize an algorithm for speed. As we were refining our code, we typically tested things out on our own accounts. However, this was a bit dangerous, since we are by no means a representative sample of users of our site. We are unusually active on the site and all have somewhat similar career histories to each other. A change that improves runtime when generating matches for one of us may not have the same impact on users who are less active or belong to a different job function. Make sure to test out any changes on a large, random sample before concluding that your changes have done the trick.</p>

<h3>6. The clearest code is not always the fastest code</h3>

<p>Imagine you have a data frame that’s 100,000 rows long where the head looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; head(my.df, 10)
</span><span class='line'>           a         b         c         d
</span><span class='line'>1         NA        NA 0.4885687        NA
</span><span class='line'>2         NA        NA 0.1666159        NA
</span><span class='line'>3         NA        NA 0.3176160        NA
</span><span class='line'>4         NA 0.9568433 0.4848375        NA
</span><span class='line'>5  0.8441578 0.3022814        NA        NA
</span><span class='line'>6  0.4223605        NA        NA        NA
</span><span class='line'>7         NA 0.7998102        NA        NA
</span><span class='line'>8         NA 0.8183823        NA        NA
</span><span class='line'>9         NA        NA        NA 0.1550433
</span><span class='line'>10 0.1511128 0.4783680        NA        NA</span></code></pre></td></tr></table></div></figure>


<p>Let’s say what you want to do is replace all of the NA’s with 0’s. So a pretty straightforward function to use would be defined as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>replaceNA &lt;- function(df){
</span><span class='line'>  df[is.na(df)] &lt;- 0
</span><span class='line'>  return(df)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>That’s concise, easy to understand, and flexible enough to handle most changes that could occur to my.df in the future. Now, take a look at this function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>replaceNAUgly &lt;- function(df){
</span><span class='line'>  df$a[is.na(df$a)] &lt;- 0
</span><span class='line'>  df$b[is.na(df$b)] &lt;- 0
</span><span class='line'>  df$c[is.na(df$c)] &lt;- 0
</span><span class='line'>  df$d[is.na(df$d)] &lt;- 0
</span><span class='line'>  return(df)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>It’s not concise, is a little difficult to understand, and is not very flexible, but it’s actually quite a bit quicker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; microbenchmark(
</span><span class='line'>+   replaceNA(my.df),
</span><span class='line'>+   replaceNAUgly(my.df)
</span><span class='line'>+ )
</span><span class='line'>Unit: milliseconds
</span><span class='line'>                           min       lq   median       uq      max neval
</span><span class='line'>     replaceNA(my.df) 219.7503 241.4529 249.8200 271.3922 316.8102   100
</span><span class='line'> replaceNAUgly(my.df) 148.9356 159.6738 167.7006 178.1716 234.8962   100</span></code></pre></td></tr></table></div></figure>


<p>In the majority of cases, the first function is fine or even preferable. However, if speed is your only concern, you may be able to speed things up if you’re willing to forgo having pretty code.</p>

<h3>7. Think about applying some filters</h3>

<p>We categorize each of our jobseekers into one of fourteen overarching job functions, such as sales, marketing, technology, or finance. If I’m a software engineer, almost all of the jobseekers who are similar to me are likely to belong in technology. Sure, we could think of some cases where someone shares attributes with people in a couple of different job functions, but this is more of an edge case. By comparing each jobseeker with the half-million other jobseekers in their job function instead of the entire set of six million, we could make the algorithm about ten times faster while still capturing the vast majority of the same results, a tradeoff we deemed totally acceptable.</p>

<h3>8. Preprocess, preprocess, preprocess</h3>

<p>One of the steps in our algorithm is to compare the set of titles a jobseeker has had in his/her career with the sets for all other jobseekers. However, sometimes two jobseekers will have had the same title but used different punctuation or capitalization when entering their title (not to mention misspellings or synonyms). As a result, we needed to remove the case and punctuation from each title before a comparison could be done. Our initial instinct was to run this text cleaning process right before doing the comparison, but this meant that we would end up cleaning the same text hundreds of times. Instead, we cleaned all the titles once, stored the results, and did the comparisons on these cleaned titles. You should constantly be on the lookout for places where the algorithm repeats a step multiple times and see if there’s a way to do so just once and then just look up those results when needed.</p>

<h3>9. Rcpp for when you’re really stuck</h3>

<p>If you’ve narrowed down your issue to a single operation and you can’t find a way around it, the <a href="http://dirk.eddelbuettel.com/code/rcpp.html">Rcpp package</a> may be able to help. With Rcpp, you can run parts of your code in C++ without interrupting the flow of the rest of your code. There’s a bit of a learning curve if you’re not familiar with C++, but the improvements could be massive enough to justify the effort. Alternatively, with some diligent Googling, you may be able to find someone who’s already solved your problem using Rcpp.</p>

<h3>10. Parallelize!</h3>

<p>For R users who have never done any sort of parallel computing before, this may seem a bit daunting. However, depending on how your code is structured, it can actually be quite trivial to run tasks on all the cores of your machine in parallel. For instance, if you’re using Linux or a Mac and part of your code is run using lapply, forcing it to run in parallel is as simple as loading the parallel package and replacing lapply with mclapply (i.e. multicore lapply). Parallelization doesn’t guarantee speed improvements, but testing it out shouldn’t require too much effort and is worth considering.</p>

<p>Along the same lines, you can force R to utilize all the cores of your machine when doing any linear algebra operations by using OpenBLAS or ATLAS, though the process of getting it up and running is not as easy. <a href="http://www.stat.cmu.edu/~nmv/2013/07/09/for-faster-r-use-openblas-instead-better-than-atlas-trivial-to-switch-to-on-ubuntu/">Nathan VanHoudnos&#8217; blog post on the topic</a> is a good place to start.</p>

<h3>11. Make sure this is all worth it</h3>

<p>While speeding things up is always a good idea, make sure you’re not spending hours of work to just speed things up by a few minutes total. Your time is better spent doing some actual analysis or model building. If this means that you need to let something run in the background of your computer while you do other stuff (or even that it needs to run overnight), so be it.</p>

<p>Have a question or comment? <a href="http://redd.it/2i4807">Join the discussion on reddit</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunder and Lightning]]></title>
    <link href="http://dev.theladders.com/2014/07/thunder-and-lightning/"/>
    <updated>2014-07-23T09:00:00-04:00</updated>
    <id>http://dev.theladders.com/2014/07/thunder-and-lightning</id>
    <content type="html"><![CDATA[<blockquote><p>The simplest of explanations is more likely to be correct than any other.</p><footer><strong>&#8211;Occam&#8217;s Razor</strong></footer></blockquote>


<h2>Braving the Storm</h2>

<p>At TheLadders, we operate a fully virtualized environment consisting of slightly less than a thousand virtual machines across our Development, QA, and Production environments.  We manage these systems with <a href="http://puppetlabs.com">Puppet</a> and <a href="http://theforeman.org">Foreman</a>, which enables us to rapidly deploy new systems when necessary, as well as maintain our systems predictably throughout their lifecycles.</p>

<p>One of the tools we <a href="http://dev.theladders.com/categories/storm/">rely on heavily</a> is <a href="https://storm.incubator.apache.org">Storm</a>, a distributed, real-time computation system.  Storm provides us with a framework that we use to constantly crunch data about the millions of job seekers and jobs in our environment.  This enables us to provide our job seekers with relevant information about the best jobs available to them at any given time.  When we build new Storm nodes, Puppet takes a very minimal OS install, lays down our standard configuration, then installs Storm, starts the Storm process and ensures it will start after reboot.</p>

<h2>Dark Skies Ahead</h2>

<p>We operate several Storm clusters across QA and Production spanning Storm versions 0.8 and 0.9.  Over the past several months, we&rsquo;ve experienced intermittent issues within the clusters where individual nodes stopped behaving properly.  The issues occur more frequently in our Production environment, which we attribute to the orders of magnitude higher volumes of traffic traversing Production.  We&rsquo;ve also seen this particular issue in both our 0.8 and 0.9 clusters.  Until recently, the problem has occurred so infrequently that it was much quicker and easier to shut down and rebuild the problem nodes than invest significant time nailing down the root cause.</p>

<p>Last month, we rebuilt our 0.9 Production cluster from the ground up and immediately began seeing topologies fail to start on multiple workers.  The issue was clouded by the fact that we saw several different errors occurring, including too many files open, DNS resolution failures, Java class not found errors, heartbeat file not found, etc.</p>

<p><span class='caption-wrapper center medium'><img class='caption' src='http://dev.theladders.com/images/thunder-and-lightning/stormy-city.jpg' width='' height='' alt='[Photo](https://www.flickr.com/photos/29311691@N05/7653430352) by [H.L.I.T.](https://www.flickr.com/photos/29311691@N05/) / [CC BY 2.0](http://creativecommons.org/licenses/by/2.0/)' title='[Photo](https://www.flickr.com/photos/29311691@N05/7653430352) by [H.L.I.T.](https://www.flickr.com/photos/29311691@N05/) / [CC BY 2.0](http://creativecommons.org/licenses/by/2.0/)'><span class='caption-text'><a href="https://www.flickr.com/photos/29311691@N05/7653430352">Photo</a> by <a href="https://www.flickr.com/photos/29311691@N05/">H.L.I.T.</a> / <a href="http://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a></span></span></p>

<h2>When it Rains, it Pours</h2>

<p>Since we were seeing multiple errors occurring without any obviously predictable pattern, we started the investigation by trying to reproduce or verify the individual errors on the nodes where we saw the issues in the Nimbus interface.  Despite complaints from Storm of DNS resolution issues, we were unable to find any issues with our DNS system or name resolution on any of the nodes in the cluster, even when performing many lookups in rapid succession.</p>

<p>After eliminating DNS as a root cause, we surmised that the real problem was limits on open file handles and that the other errors &mdash; Java class not found, heartbeat file not found and DNS resolution failure &mdash; were just different manifestations of the process’ inability to open a file handle or socket.  One change that Puppet makes to our systems is to increase the open file handle limits for the storm user/process from the default of 1024 to 256k.  We do this by setting the <code>nofile</code> option in <code>/etc/security/limits.conf</code>.  We verified on every host that the Storm user had properly set file handle limits.  Observing the workers when they were experiencing the issue proved difficult because Storm dynamically assigns workers to nodes at process startup and processes are not sticky.  This means that in our situation, where processes were starting and dying very quickly, it was extremely challenging to be logged into the host watching the process and gathering useful data in the few seconds between startup and death.  One approach to avoid this problem was to shut down workers to eliminate unused worker slots, thus limiting the potential destinations for new processes.  After a prolonged struggle with observing a process as it died, we were finally able to see that the worker process itself was limited to the default 1024 file handles.  We confirmed this suspicion by watching <code>/proc/&lt;PID&gt;/limits</code> to confirm that all Storm related processes were limited to 1024 open file handles on the affected hosts.</p>

<h2>Every Cloud has a Silver Lining</h2>

<p>Now that we had observed a worker process with a 1024 open file handle limit, we moved on to determining how this could happen and why it seemed to occur only on certain nodes.  We noted that rebooting a host did not resolve the issue and further that rebooting a working node caused it to cease functioning properly.  After quite a bit of experimentation, we found that manually restarting the Storm supervisor on an affected host allowed the node to function properly again, at least until the next reboot.</p>

<p>We recently altered our new machine deployment to reboot the host between running Puppet and putting the machine in service.  Whereas previously the Storm supervisor would be started by Puppet and function normally, the supervisor is now being started by init on boot.</p>

<p>We ultimately determined that the root cause of this issue is that processes started by init don&rsquo;t go through pam, so limits set in <code>/etc/security/limits.conf</code>, which is utilized by <code>pam_limits.so</code>, are not applied to processes started on boot.</p>

<p>We chose to solve this issue by following the RHEL convention of configuration in /etc/sysconfig and modifying the storm supervisor init script to load <code>/etc/sysconfig/storm</code> if it exists.  Our <code>/etc/sysconfig/storm</code> contains a single line for the time being, increasing the <code>nofile</code> limit to 256k.  This method provides us with the flexibility to augment the configuration in the future with minimal impact.</p>

<p>Once Puppet deployed this change to our entire environment, we verified via <code>/proc/&lt;PID&gt;/limits</code> that the Storm supervisors had picked up the changes both when started by hand/Puppet and when started on boot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring RabbitMQ at TheLadders]]></title>
    <link href="http://dev.theladders.com/2014/07/monitoring-rabbitmq-at-theladders/"/>
    <updated>2014-07-15T10:24:00-04:00</updated>
    <id>http://dev.theladders.com/2014/07/monitoring-rabbitmq-at-theladders</id>
    <content type="html"><![CDATA[<blockquote><p>Alice:        “How long is forever?”</p><p>White Rabbit:     “Sometimes, just one second.&#8221;</p><footer><strong>&#8211;Lewis Carroll</strong> <cite>Alice in Wonderland</cite></footer></blockquote>


<h2><em>Motivation</em></h2>

<p>TheLadders makes heavy use of <a href="http://www.rabbitmq.com">RabbitMQ</a> in its operations. RabbitMQ is a messaging broker that we use to connect our applications. Sending and receiving are separate, so the messaging is asynchronous. The asynchronous messaging decouples one application from another. We use RabbitMQ to publish events to multiple subscribers and to queue up work.</p>

<ul>
<li>In some cases, events in our systems are ad hoc, driven by the various activities of our users. Examples of such events include the addition of a job seeker or a job to the system. These events are realized as RabbitMQ messages posted to exchanges. Systems interested in these events read them from queues bound to the exchanges.</li>
<li>In other cases, a scheduled process posts RabbitMQ messages to an exchange so that a specific system (say, a <a href="https://storm.incubator.apache.org">Storm</a> topology) can process them. An example of this is a system that calculates matches between jobs and job seekers and puts those matches on a queue. A Storm topology reads those matches from the queue and transforms them into emails to be sent by an external email service.</li>
</ul>


<p>In the first scenario above, we are mostly interested in making sure that the queue of ad hoc events has not grown too large, which would indicate a problem with the system that is consuming the messages.</p>

<p>In the second scenario, we want to be sure that messages are being published to the queue at a suitable rate, and that the topology that consumes the messages is processing them quickly enough to get the emails out by a particular time.</p>

<p>We did not find a suitable ready-to-use solution for this need. As you will see below, we eventually arrived at a solution that combined a <a href="http://clojure.org/">Clojure</a> library for accessing RabbitMQ queue metrics with a <a href="http://riemann.io">Riemann</a> server to process events produced by the library.</p>

<h2><em>First Attempts</em></h2>

<p>Our first attempts at a monitoring solution revolved around an assortment of shell scripts that made HTTP requests to the RabbitMQ Management API to discover the lengths of important queues at particular times. If certain thresholds were crossed, alerts were sent to on-call personnel. This approach had a number of drawbacks:</p>

<ul>
<li>Brittleness: The times of the Management API queries were controlled by when the script was run by cron. The queue length thresholds were often dependent on the sizes of the datasets involved and the speed of the systems which published messages or read them from the queues.</li>
<li>Measuring Queue Lengths at a Single Point in Time: Checking the queue length at a particular point in time could not provide the information necessary to answer questions such as &ldquo;When will this queue be drained?&rdquo; and &ldquo;Are messages being placed on the queue at a rate sufficient to meet a particular processing schedule?&rdquo;</li>
</ul>


<h2><em>How We Solved the Problem</em></h2>

<p>We created a <a href="http://clojure.org/">Clojure</a> library called <a href="https://github.com/TheLadders/monitor-rabbitmq">monitor-rabbitmq</a>, available on GitHub.
It gathers statistics on RabbitMQ queues and nodes, and packages them as <a href="http://riemann.io">Riemann</a> events. <em>monitor-rabbitmq</em> takes care of acquiring RabbitMQ statistics from the RabbitMQ cluster, using the RabbitMQ’s HTTP based <a href="http://hg.rabbitmq.com/rabbitmq-management/raw-file/rabbitmq_v3_3_4/priv/www/api/index.html">Management API</a>. Riemann takes care of aggregating the events and performing the calculations necessary to determine whether an alert should be triggered.</p>

<hr />

<p><em>A Bit More Detail</em></p>

<p><strong>What’s the data flow?</strong></p>

<p><img class="center" src="http://dev.theladders.com/images/monitor-rabbitmq2.png" title="'Data Flow graphic'" ></p>

<p><strong>What queue data does</strong> <em>monitor-rabbitmq</em> <strong>gather?</strong> [all rates are messages per second]</p>

<ul>
<li>Queue Length: number of messages on the queue</li>
<li>Ack rate: messages acknowledged by the client</li>
<li>Deliver rate: notifications to the client that there is a message</li>
<li>Deliver-get rate: combination of deliver and get rates</li>
<li>Deliver-no-ack rate: notifications to the client that there is a message which does not require acknowledgement</li>
<li>Get rate: messages synchronously requested by client</li>
<li>Get-no-ack rate: messages sent to client with no acknowledgement required</li>
<li>Publish rate: messages published to the queue</li>
<li>Redeliver rate: messages redelivered to the client after being delivered and not acked</li>
</ul>


<p><strong>What node data does</strong> <em>monitor-rabbitmq</em> <strong>gather?</strong></p>

<ul>
<li>fd_used: file descriptors used</li>
<li>fd_total: file descriptors total</li>
<li>sockets_used</li>
<li>sockets_total</li>
<li>mem_used</li>
<li>mem_limit</li>
<li>mem_alarm: memory high water mark alarm</li>
<li>disk_free</li>
<li>disk_free_limit</li>
<li>disk_free_alarm: disk free low water mark alarm</li>
<li>proc_used</li>
<li>proc_total</li>
</ul>


<p><strong>What does each</strong> Riemann <strong>event look like?</strong>
Here is the Clojure representation (a map):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">{</span><span class="ss">:time</span> <span class="mi">1390593087006</span>,
</span><span class='line'>    <span class="ss">:host</span> <span class="s">&quot;our-rabbitmq.super.awesome.queue&quot;</span>,
</span><span class='line'>    <span class="ss">:service</span> <span class="s">&quot;publish.rate&quot;</span>,
</span><span class='line'>    <span class="ss">:metric</span> <span class="mf">0.0</span>,
</span><span class='line'>    <span class="ss">:state</span> <span class="s">&quot;ok&quot;</span>,
</span><span class='line'>    <span class="ss">:tags</span> <span class="p">[</span><span class="s">&quot;rabbitmq&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This event, created by the Clojure library, includes a <code>:host</code> member which is formed by taking a <code>rmq-display-name argument</code> (“our-rabbitmq”) and composing it with the queue (or node) name: “super.awesome.queue”</p>

<h2><em>An Example</em></h2>

<p>Let&rsquo;s say that we have a queue which is read by a Storm topology. That queue contains messages which hold matches between jobs and job seekers. The topology must process the messages so that emails notifying job seekers of these job opportunities are composed and sent to an external email service. We want to be alerted if the messages are being consumed from the queue at a rate such that the queue will not be cleared by a certain deadline, say 9:00 AM.</p>

<p>We create a simple Clojure application that calls the <code>send-nodes-stats-to-riemann</code> function of our library and then exits. We call this application once a minute. Each call results in a full set of queue statistics being sent to our Riemann server.</p>

<p>Meanwhile, on the Riemann side of things, Riemann has been configured to watch the Ack rate of our queue. Riemann accumulates events over a time interval, smoothing out minor variations in the Ack rate, and calculates a projected time for the queue to be emptied. If the Ack rate dips below a certain threshold, it triggers an alert using, in our environment, the <a href="https://www.icinga.org">Icinga</a> monitoring system.</p>

<h2><em>Wrapping Up</em></h2>

<p>With <em>monitor-rabbitmq</em>, we supply a regular flow of events to our Riemann server containing data about our RabbitMQ queues and nodes. By choosing a good base set of statistics to request from the RabbitMQ Management API, a change to our monitoring and alerting requirements usually results in only a change to our Riemann configuration.</p>

<p>Find this useful? Join the discussion at <a href="https://news.ycombinator.com/item?id=8036593">Hacker News</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brewing Storm]]></title>
    <link href="http://dev.theladders.com/2013/12/a-brewing-storm/"/>
    <updated>2013-12-19T11:45:00-05:00</updated>
    <id>http://dev.theladders.com/2013/12/a-brewing-storm</id>
    <content type="html"><![CDATA[<blockquote><p>If there&#8217;s a book that you want to read, but it hasn&#8217;t been written yet, then you must write it</p><footer><strong>&#8211;Toni Morrison</strong></footer></blockquote>


<p>Once upon a time there was a script. Each morning it sent new jobs to our job seeking customers. It was simple and the data it operated on was relatively small.  As the months turned into years this script grew in complexity and the data grew in size.  And more scripts came to the party and they had data of their own and these new scripts beget data for other scripts, and this small group of scripts extracted and transformed, processed and prepared, working tirelessly every night.</p>

<p>Some worked alone while others fed each other, all growing increasingly more complex.  Occasionally at first and more frequently over time, the scripts started to interfere with each other by competing for resources or not finishing in time for a child script to consume it’s parents data, or worst of all, deadlocking for no apparent reason.</p>

<p>Let’s bring some order we said and used cron to wrangle them at first, then moving to more complex “enterprise” scheduling systems to try and tame the beast, and keep the scripts from clobbering each other or grinding themselves to a crawl.</p>

<p>But the data grew and grew and with it came longer and longer run times.  At this same time our script was getting slower, our users’ expectations and our own ambitions grew.  Could we alert a job seeker the minute a new relevant job entered our system?  Could we alert an employer as soon as job seeker they were interested in updated their profile?</p>

<p>The network of interactions/activity/entities we wanted to grow, monitor and react to and then extract value from was exploding in complexity.  You can picture all of our job seekers, employers and jobs as nodes in a graph, and imagine our teams are furiously trying to connect them in new and interesting ways.  They are using machine learning to light up edges between these nodes, indicating which jobs a particular job seeker might be interested in and which job seekers an employer might like.  Or clustering these entities into similar groups.</p>

<p>Doing all of this between 12am and 6am was getting hard. Hadoop was an option, but processing speed alone wasn’t just the issue.  Some things we wanted to do had to be done in real time, not batch.  A user isn’t going to wait until the nightly run for us to calculate what jobs are appropriate for them.  In addtion, as TheLadders moves into mobile and speed becomes more and more a concern we want the Graph of our Ecosystem to be as current as possible not something that gets updated once a day.</p>

<p>There comes this thing. Storm. It fits into our infrastructure; working nicely with RabbitMQ and interop’ing well with our existing code base.</p>

<p>However, Storm is young and fresh out of Twitter.  Getting it to work, quickly and reliably can be painful as can figuring out the best practices to manage it.  All of this took us some time and some hard lessons had to be learnt.  A lot of late nights and head scratching, time spent hanging out in irc channels, reading blog posts, watching conference talks and just plain ole trial and error and occassionally grabbing Nathan Marz when he was speaking to ask “How do we deal with X?” brought us to our current place.</p>

<p>Today Storm runs most of the backend at TheLadders, keeping that graph of our ecosystem fresh so our experience teams can ship great new features to our customers.  And we hope you can find a use for Storm and maybe get there quicker than we did.  Manning publications reached out to us and I’m incredibly excited and very proud to announce that three of our top engineers, Sean Allen, Matt Jankowski and Peter Pathirana produced a book, Storm Applied, a book designed to help you leverage some of the hard earned knowledge we’ve acquired here at TheLadders. Storm Applied will be available in the <a href="http://www.manning.com/sallen/">Manning Early Access Program</a> any day now.  We hope you find it useful and we look forward to your feedback on the book.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Design: Keeping our thick client skinny]]></title>
    <link href="http://dev.theladders.com/2013/10/responsive-design-keeping-our-thick-client-skinny/"/>
    <updated>2013-10-30T01:37:00-04:00</updated>
    <id>http://dev.theladders.com/2013/10/responsive-design-keeping-our-thick-client-skinny</id>
    <content type="html"><![CDATA[<blockquote><p>Recognizing the need is the primary condition for design.</p><footer><strong>&#8211;Charles Eames</strong></footer></blockquote>


<p>You may or may not have noticed, but <a href="https://www.theladders.com/">TheLadders.com</a> just got a huge make over. We rewrote the website, putting it through a diet and a facelift. The team cut out excess network calories, trimmed DOM fat, and ironed out sloppy CSS wrinkles. We started 2013 with a shiny new single-page thick web client that is not only faster and cleaner, but uses some pretty provocative polishes like backbone.js, require.js, and SASS with Compass. But my favorite part: it’s responsive and looks great no matter where it goes.
iPhone? Check. iPad? Check. MacBook Air? Check. Ginormous iMac screen? Check.</p>

<p><span class='caption-wrapper left small'><img class='caption' src='http://dev.theladders.com/images/responsive/ladders-wide.jpeg' width='' height='' alt='New TheLadders.com on a desktop screen with the wide experience' title='New TheLadders.com on a desktop screen with the wide experience'><span class='caption-text'>New TheLadders.com on a desktop screen with the wide experience</span></span></p>

<p><span class='caption-wrapper left small'><img class='caption' src='http://dev.theladders.com/images/responsive/ladders-skinny.png' width='' height='' alt='New TheLadders.com on mobile with the skinny experience. Left: main content screen, right: [off canvas](http://jasonweaver.name/lab/offcanvas/) sidebar' title='New TheLadders.com on mobile with the skinny experience. Left: main content screen, right: [off canvas](http://jasonweaver.name/lab/offcanvas/) sidebar'><span class='caption-text'>New TheLadders.com on mobile with the skinny experience. Left: main content screen, right: <a href="http://jasonweaver.name/lab/offcanvas/">off canvas</a> sidebar</span></span></p>

<h2>Adapt to survive</h2>

<p><span class='caption-wrapper left small'><img class='caption' src='http://dev.theladders.com/images/responsive/messy-windows.jpg' width='' height='' alt='Look familiar? Users will squish, stretch, enlarge, and shrink their windows. Responsive design is not just for mobile devices, it’s for the wild jungle of user behavior out there.' title='Look familiar? Users will squish, stretch, enlarge, and shrink their windows. Responsive design is not just for mobile devices, it’s for the wild jungle of user behavior out there.'><span class='caption-text'>Look familiar? Users will squish, stretch, enlarge, and shrink their windows. Responsive design is not just for mobile devices, it’s for the wild jungle of user behavior out there.</span></span>
Mobile is here, and has been for years. It is only a matter of time before we are forced to adapt the front-end code design in order to survive on all screens. To me, responsive design is not an option; it’s mandatory.</p>

<p>It&rsquo;s not just about fitting inside of a phone screen either. Our site should be flexible and sturdy enough to undergo all sorts crazy behavior: windows shrinking, windows expanding, zoom in, zoom out, and so forth. It’s a wilderness of user actions with legions of new mobile devices to support &hellip; how the heck do we keep up?</p>

<h2>One size fits most</h2>

<p>TheLadders’ responsive support subscribes to the majority rule. We prioritize the user experience for the majority, and the minority cases are “overlooked.” This means the website is not tested on every phone and tablet &ndash; even newer ones &ndash; because there isn’t enough site traffic. We sacrificed this level of precision hoping to concentrate instead on improving the experience for the majority.
<span class='caption-wrapper right extra-small'><img class='caption' src='http://dev.theladders.com/images/responsive/device-breakdown.jpeg' width='' height='' alt='Google Analytics device breakdown. Blue - iPhone, Green - iPad, Gray - undetermined. Other slivers are mostly Samsung Android devices.' title='Google Analytics device breakdown. Blue - iPhone, Green - iPad, Gray - undetermined. Other slivers are mostly Samsung Android devices.'><span class='caption-text'>Google Analytics device breakdown. Blue &ndash; iPhone, Green &ndash; iPad, Gray &ndash; undetermined. Other slivers are mostly Samsung Android devices.</span></span></p>

<p><strong>First</strong>, we decided what we were going to support &ndash; devices and screen size ranges:</p>

<ul>
<li>Devices

<ul>
<li>iPhone 4S and up (incl. iPad mini)</li>
<li>iPad 2 and up</li>
</ul>
</li>
<li>Screen size ranges

<ul>
<li>20em (320px) to 48em (768px) for skinny experience support</li>
<li>50em (800px) and up for wide experience support</li>
</ul>
</li>
</ul>


<p>Together these Apple devices compose approximately 17% of our total page visits (includes hits from both browsers and devices). Of course you should look at your own device and browser breakdowns before deciding on a strategy. But do it early, otherwise you will be spending a lot of time debugging for ~1% of your users.</p>

<p><strong>Second</strong>, we decided on our limitations. I think this saved hours of designer/developer time by acknowledging that not everything will interact exactly as it would on a desktop screen:</p>

<ul>
<li>Can’t support every mobile device and every screen width.</li>
<li>Can’t have 100% feature parity between a mobile device and a desktop browser.</li>
<li>Support for touch gestures (like swipe) costs extra code.</li>
<li>Modals are not small screen friendly, especially certain date pickers.</li>
<li>Hover states will be awkward on a touch screen. (If there is a hover state, the first tap is hover and the second tap is click.)</li>
<li>Performance will suffer on mobile connections.</li>
</ul>


<p><strong>Third</strong>, we decided what techniques to use. Truthfully, each of these points needs its own blog topic, but here’s a quick list for now:</p>

<ul>
<li><a href="http://jasonweaver.name/lab/offcanvas">Off canvas</a> layout for our “skinny” experience.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/CSS/Media_queries">Media queries</a> to trigger the skinny vs. wide experience. Used SASS to implement <a href="http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32">reusable media query break points</a>, making our lives MUCH easier.</li>
<li>Set <a href="https://developer.mozilla.org/en-US/docs/Mobile/Viewport_meta_tag">width=device-width</a> in viewport metatag.</li>
<li><a href="http://css-tricks.com/examples/PerfectFluidWidthLayout">Elastic layout</a> for widths.  Use % widths to create a fluid main content area, and a fixed width for the sidebar area.</li>
<li>Use em. First <a href="http://css-tricks.com/css-font-size">understand</a> what measurement units are out there. There are many reasons to use em, but <a href="http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw">this article</a> made the best case.</li>
<li>SVG for responsive images.  We chose to use SVG logos and icons that fall back to PNG sprites if SVG is not supported.</li>
</ul>


<p>Now we should never, ever see a horizontal scroll bar. Scrollbars mean users can’t easily see precious content and get a unfulfilling experience.</p>

<p><span class='caption-wrapper center medium'><img class='caption' src='http://dev.theladders.com/images/responsive/sad-scrollbar.png' width='' height='' alt='Ewww horizontal scrollbar' title='Ewww horizontal scrollbar'><span class='caption-text'>Ewww horizontal scrollbar</span></span></p>

<h2>Mobile First?</h2>

<p>Mobile first means to implement your website for mobile devices first, and desktop, etc., second. It helps set boundaries for page weight and complicated layouts that are unfriendly to handhelds.</p>

<p>In theory, mobile first for design and development is a good idea.  It’s a sure-fire way to keep your pages as lightweight as possible. But in practice, our designer created mobile designs simultaneously with desktop designs, remembering to remove superfluous visual elements, ensuring a similar design would work for a small screen. As for development, we coded for the desktop first because we still support IE8 (IE8 doesn’t support media queries).  We built a desktop version first and used media queries to adjust for the mobile version. This way, IE8 screens work without extra media queries. Only mobile and the latest browsers are responsible for triggering media queries.</p>

<p>So we aren’t really mobile first, but it heavily influences how we design the site. This practice works well if the designs are clean, and you are innately stingy with markup.</p>

<h2>Anyway …</h2>

<p><span class='caption-wrapper right extra-small'><img class='caption' src='http://dev.theladders.com/images/responsive/rabbit-pair.jpg' width='' height='' alt='Collaborating like arctic hares' title='Collaborating like arctic hares'><span class='caption-text'>Collaborating like arctic hares</span></span>
My favorite side-effect of going responsive is the close collaboration between designers and developers. It’s hard to articulate screen reactions and device behavior through design comps. During this rewrite our front-end team and design team were pairing regularly throughout the day to determine what responsive meant for TheLadders.</p>

<p>Also, it is important to recognize a responsive website is NOT a substitute for a native phone application.  A browser page and native phone application have completely different rules of conduct, so just because your website is responsive doesn’t mean you don’t need a native application.</p>

<h2>Results</h2>

<p>Our new responsive website is still young, it was only released earlier this year. We’ve just begun to throw serious traffic at it, but I’m confident that it performs and looks better than the old, non-responsive site. We are closely monitoring customer satisfaction and page visits from mobile devices. Hopefully in a couple months we’ll have flattering statistics and feedback to post.</p>

<p>Until then, check it out for yourself: <a href="https://www.theladders.com/">www.theladders.com</a>. While it is by no means perfect&mdash;there are some devices and screen configurations where the experience is less than optimal&mdash;it is far better than the original site both in terms of its responsiveness and clean design.</p>

<p>Join the discussion at <a href="https://news.ycombinator.com/item?id=6641857">Hacker News</a>.</p>

<p><em>Note: In an effort to most accurately describe the current state of our site&rsquo;s responsiveness, this post was edited and updated by Daniel Wislocki. It was originally written by <a href="https://twitter.com/logtailer">Christina Kung</a> in early April, when design was unfinished.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We're Hosting the first NYC Erlang Factory Lite on September 14th]]></title>
    <link href="http://dev.theladders.com/2013/08/were-hosting-erlang-factory-lite/"/>
    <updated>2013-08-07T16:06:00-04:00</updated>
    <id>http://dev.theladders.com/2013/08/were-hosting-erlang-factory-lite</id>
    <content type="html"><![CDATA[<p>Thanks to one of our Lead Software Engineers, Derek Brown, TheLadders will be hosting the first <a href="http://www.erlang-factory.com/conference/NYC2013">NYC Erlang Factory Lite</a> on the 14th of September.</p>

<p>If you haven’t heard about Erlang before, it is an open-source programming language that was designed for massive concurrency, making it an ideal candidate for scalability on multicore architectures. The language was invented for telecoms, but due to its unique features it quickly made its way into a range of other verticals with similar requirements – from financial switches, through instant messaging servers, HTTP servers and web frameworks, database engines and so forth. It is used for highly available systems, providing uptime of five nines and allowing live code updates, all at a fraction of the effort required by conventional languages such as C++ and Java. Ericsson, Aol, WhatsApp, Nokia, T-Mobile, Heroku and Basho are a few of the companies that employ Erlang.</p>

<p>At TheLadders, we’re currently using two of the most popular software products written in Erlang: the document-oriented database system Couchbase, and RabbitMQ, an AMQP messaging service. I asked Derek how he found out about Erlang in the first place: &ldquo;I became interested in Erlang while first reading about functional programming, and was drawn to its fault-tolerant capabilities and its unique syntax. Erlang&rsquo;s functional nature is a big draw, coming from an imperative background. On top of that, the Erlang community is active and very open. So a few years later here I am co-organizing the NYC Erlang Meetup and now co-organizing the NYC Erlang Factory Lite.&rdquo;</p>

<p>On the 14th of September New York developers will not only get to find out more about Erlang and its applications to distributed environments, but also to meet two of the language’s inventors. NYC Erlang Factory Lite will also be a chance for the East Coast Erlang community to showcase Erlang and its use in the real world. Adam Denenberg, VP of Engineering at the Huffington Post will talk about the architecture and setup built by the Huffington Post to power their real-time WebSocket-based commenting framework.  Leveraging RabbitMQ, SockJS, Cowboy and Erlang, they were able to build and design a highly scalable, customizable solution to power real-time comments. Christopher Meiklejohn, software engineer at Basho, will provide an introduction to building Riak Core applications. Fred Hebert, engineer on Heroku&rsquo;s Routing Team, will talk about Heroku’s cloud platform composed of heterogeneous components (written in Ruby, Erlang and Go, to name a few) and why a large part of its routing stack is written in Erlang.  Other speakers include Christian Gribneau, CTO of Ology Media, and Mahesh Paolini Subramania, Creator of the first Erlang Cloud PBX. For more info check out the program on the ErlangFactory website: <a href="http://www.erlang-factory.com/conference/NYC2013/programme">http://www.erlang-factory.com/conference/NYC2013/programme</a></p>

<p>The high point of the day will the keynotes of Joe Armstrong and Robert Virding, two of the three inventors of the language. Joe was part of the team who designed and implemented the first version of Erlang and has written several Erlang books including Programming Erlang Software for a Concurrent World. He will be talking about the OTP rationale. OTP is a number of different things: a delivery platform for Erlang and the Erlang VM, a large set of general-purpose libraries and a set of design principles. Robert took part in the original system design and contributed much of the original libraries, as well as to the current compiler. While at the lab he also did a lot of work on the implementation of logic and functional languages and on garbage collection. He also taught Erlang to literally hundreds of developers.  In his talk he will look at the rationale behind Erlang and try to show how many of its important features combine to work together.</p>

<p>For those interested in learning Erlang, Robert Virding will teach a three-day course immediately prior to the Erlang Factory Lite. The course contains all the Erlang basics such as sequential and concurrent programming, alongside error handling. More details on all modules here: <a href="http://www.erlang-factory.com/conference/NYC2013/university/ErlangExpress">http://www.erlang-factory.com/conference/NYC2013/university/ErlangExpress</a></p>

<p>Early Bird tickets are available at $70 until the 16th of August. After the 16th, the full-price ticket is $90. Half-price student discounts are also available. Places are limited, so if you want to come you should get your ticket now.</p>

<p>If you want to find out more about Erlang, here’s a great introduction to Erlang ‘from behind the trenches’ video: <a href="https://vimeo.com/19806728">https://vimeo.com/19806728</a>. A lot more videos and slides from various Erlang Factory events around the world can be found on the event website: <a href="http://www.erlang-factory.com/">http://www.erlang-factory.com/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Denormalize the Datas for Great Good]]></title>
    <link href="http://dev.theladders.com/2013/07/denormalize-the-datas-for-great-good/"/>
    <updated>2013-07-08T16:02:00-04:00</updated>
    <id>http://dev.theladders.com/2013/07/denormalize-the-datas-for-great-good</id>
    <content type="html"><![CDATA[<blockquote><p>Normal is not something to aspire to, it&#8217;s something to get away from.</p><footer><strong>&#8211;Jodie Foster</strong></footer></blockquote>


<h2>Scout reads go slow</h2>

<p>A few weeks ago, as we were about to launch our <a href="http://app.appsflyer.com/id654867487?pid=TLC_organic">iPhone app</a>, we discovered that one of its core features, Scout, frequently took seconds to render.</p>

<center>
<span class='caption-wrapper small'><img class='caption' src='http://dev.theladders.com/images/denormalize-the-datas-for-great-good/scout-screenshot.png' width='' height='' alt='Scout' title='Scout'><span class='caption-text'>Scout</span></span>
</center>


<p>For a little background as to what Scout is, at TheLadders our mission is to find the right person for the right job. One of the ways we strive to deliver on that promise is to provide jobseekers information about jobs they’ll find nowhere else. Serving that mission is Scout, which in a nutshell allows jobseekers to view anonymized information about applicants who have applied to the job they are viewing. Salary, education, career history: we present a lot of useful information to jobseekers about their competition for any given job.</p>

<p>Over time, some attractive jobs accumulate on the order of 30 to 60 applicants, yielding response times of over 1 second (due to multiple synchronous requests, done serially, just to serve <em>one</em> Scout view request).  In cases of higher load, sometimes request times take well over that.</p>

<center>
<span class='caption-wrapper small'><img class='caption' src='http://dev.theladders.com/images/denormalize-the-datas-for-great-good/scout-screenshot-many-applies.png' width='' height='' alt='Scout view of a job with many applicants' title='Scout view of a job with many applicants'><span class='caption-text'>Scout view of a job with many applicants</span></span>
</center>


<p>That brings Scout into unusably slow country, as the Graphite chart below indicates:</p>

<center>
<span class='caption-wrapper medium'><img class='caption' src='http://dev.theladders.com/images/denormalize-the-datas-for-great-good/before-graphite.png' width='' height='' alt='95th percentile of response times for Scout in seconds' title='95th percentile of response times for Scout in seconds'><span class='caption-text'>95th percentile of response times for Scout in seconds</span></span>
</center>


<p>The graph shows the time it takes to form a response to a view-job request issued by our iPhone app. It’s the 95th percentile, which means that 5% of requests had times of the lines in the graph or higher for any given date.  One in twenty requests took this long or longer. There are many lines because we have a horizontally scalable architecture, so there are many backend app nodes.</p>

<p>We managed to bring those seconds down to milliseconds, with about a 1000x decrease in times of high load.  Below I’ll describe the changes in our architecture that enabled us to make such a huge improvement.</p>

<hr />

<h2>Architecture</h2>

<p>In its initial implementation, Scout’s applicant information was gathered and assembled on the fly for each and every request. Driving the iPhone app, we have a backend app server, which is essentially just a number of RESTful endpoints against which our iPhone app issues requests.  Below is a quick rundown of the architecture before I trace a request through our architecture.</p>

<center>
<span class='caption-wrapper medium'><img class='caption' src='http://dev.theladders.com/images/denormalize-the-datas-for-great-good/front-end-orchestration.png' width='' height='' alt='iPhone app talks to the backend app server' title='iPhone app talks to the backend app server'><span class='caption-text'>iPhone app talks to the backend app server</span></span>
</center>


<p>Below this backend server there are a number of RESTful entity servers with which the app server is interacting via HTTP.</p>

<p><span class='caption-wrapper center medium'><img class='caption' src='http://dev.theladders.com/images/denormalize-the-datas-for-great-good/front-end-orchestration-entity.png' width='' height='' alt='Backend app server relies on entity servers' title='Backend app server relies on entity servers'><span class='caption-text'>Backend app server relies on entity servers</span></span></p>

<p>These entity servers in turn query each other and the canonical data store, in our case Clustrix, and that’s that.</p>

<p><span class='caption-wrapper center medium'><img class='caption' src='http://dev.theladders.com/images/denormalize-the-datas-for-great-good/front-end-orchestration-entity-clustrix.png' width='' height='' alt='Entity servers query the db' title='Entity servers query the db'><span class='caption-text'>Entity servers query the db</span></span></p>

<p>So when a user of our iPhone app taps on a job, a request is sent to the backend app server&hellip;</p>

<p><img class="center medium" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/mobile-orchestration-request.png" title="iPhone app makes a request" ></p>

<p>&hellip;which then issues a request to our job application service for all job applications for that job. The response contains a number of links to the where those job applications may be retrieved.</p>

<p><img class="center medium" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/mobile-orchestration-service-request.png" title="backend server queries the job application service for all applications to a job" ></p>

<p>The backend server iterates over those links, requesting the job applications themselves one at a time. Just as before, adhering to hypermedia design, the response contains a link to the jobseeker who applied to the job. For your sanity, I’ve simplified the response to contain only the job seeker link:</p>

<p><img class="center medium" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/mobile-orchestration-service-request2.png" title="backend retrieves each application" ></p>

<p>Finally with that result set, the orchestration service then issues a number of requests to the job seeker service for information about the job seekers who have applied to the job being viewed.  In its initial implementation all of the requests were synchronous and in series as I mentioned earlier. We eventually parallelized them, as you can see in the Graphite chart where the big spikes left diminish towards the right.</p>

<p><img class="center medium" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/mobile-orchestration-service-request3.png" title="backend retrieves each application" ></p>

<p>The iPhone app backend server then extracts the relevant information from those job seekers’ profiles, and returns them as a JSON array of applicants to the mobile app.</p>

<p><img class="center medium" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/mobile-orchestration-response.png" title="backend retrieves each application" ></p>

<p>That is not just a lot of words and diagrams, that is a lot of work!</p>

<p>The workflow includes multiple objects serializing and deserializing, HTTP transfers, hitting the canonical store etc. Why does each request need to assemble this data itself? Why bother hitting the database? Is there an alternative? It seems like a natural fit for a document-oriented database, as the data we are passing back to the client is just a JSON object containing an array of applicants.  We could stand a <a href="http://dev.theladders.com/2013/05/varnish-in-five-acts/">Varnish cache</a> in front of the Scout endpoints on the orchestration service, but then we’d be trading freshness for speed. On the platform team we like to deliver data fast and fresh (and furious).</p>

<p><img class="center" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/tokyo-drift-o.gif" title="how we roll at the Democratic Republic of Platformia" ></p>

<hr />

<h2>Scout reads go fast</h2>

<p>Principal Architect <a href="http://twitter.com/SeanTAllen">Sean T Allen</a> set <a href="http://twitter.com/casio_juarez">Andy Turley</a> and me to improving Scout’s performance. The architecture is surprisingly simple: stick the data in <a href="http://www.couchbase.com/">Couchbase</a> and have the iPhone app backend query that instead. How would we keep this data up-to-date? The first step is to have the job application entity service emit a RabbitMQ event when it receives an application from a job seeker to a particular job (a PUT returning a 201).  On the other end of that message queue there is a  <a href="http://dev.theladders.com/2013/03/riders-on-the-storm-take-a-long-holiday-let-your-children-play/">Storm</a> topology that should listen for that message. The RabbitMQ message would be the entry point into the spout.</p>

<p>The message contains a link to the job seeker who applied to the job, as well as the ID for the job to which she applied.   The message isn’t actually encoded as JSON and transmitted over the wire, but for clarity I’ve displayed the RabbitMQ message as JSON.</p>

<p><img class="center" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/rabbitmq-storm.png" title="RabbitMQ passes along a job-application message to a listening Storm topology" ></p>

<p>The second step, after having received the RabbitMQ message, fetches the job seeker profile from the jobseeker service, and passes that information to the next step.</p>

<p><img class="center" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/rabbitmq-storm-jobseeker.png" title="The Storm topology extracts the job seeker link from the messages and retrieves information about the job seeker who just applied to the job." ></p>

<p>This third step is responsible for persisting the applicant information to a Couchbase bucket. It uses the job ID as the key, and it does a create or update operation on the document corresponding to that key depending on whether there are applicants already in the bucket for that job.</p>

<p><img class="center" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/rabbitmq-storm-couchbase.png" title="The final step is that the topology persists the relevant job" ></p>

<p>That last diagram is a bit of a simplification. Although Couchbase is &ldquo;JSON-aware&rdquo;, it lacks the ability to perform certain operations on the JSON documents it stores.  For example, if the document being stored is an Array, and the client&rsquo;s append method is called, we hoped that Couchbase would add that element to the end of the Array. Instead, it&rsquo;s just a blind String.append, resulting in an invalid JSON document. As a result, we had to implement our own append operation by reading the document (if it exists), adding an item to a list if it’s not already there, and then writing the document.  So it’s more like two operations than one.</p>

<p><em>Now</em> when TheLadders mobile service gets a request for Scout information for a job, all it does is a lookup in Couchbase with that job ID and returns the applicants associated with that key.</p>

<p><img class="center" src="http://dev.theladders.com/images/denormalize-the-datas-for-great-good/mobile-orchestration-couchbase.png" title="iPhone issues a request for Scout information, backend just retrieves it from couchbase" ></p>

<p><span class='caption-wrapper center'><img class='caption' src='http://dev.theladders.com/images/denormalize-the-datas-for-great-good/before-couchbase-after-no-lines.png' width='' height='' alt='95th percentile response time for Scout data, before and after moving to the read view' title='95th percentile response time for Scout data, before and after moving to the read view'><span class='caption-text'>95th percentile response time for Scout data, before and after moving to the read view</span></span></p>

<p>Dramatically faster, even at the 95th percentile.</p>

<hr />

<p>SOA is no panacea. There are many instances where querying a number of backend servers to assemble and aggregate data returned from a database simply doesn&rsquo;t make sense. In those cases, you may do well to denormalize that data and put it in a store that&rsquo;s more efficient for retrieval.</p>

<p>If you find this post interesting, join the dicussion over on <a href="https://news.ycombinator.com/item?id=6015123">Hacker News</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Evolution of QA at TheLadders]]></title>
    <link href="http://dev.theladders.com/2013/05/the-evolution-of-qa-at-theladders/"/>
    <updated>2013-05-16T09:04:00-04:00</updated>
    <id>http://dev.theladders.com/2013/05/the-evolution-of-qa-at-theladders</id>
    <content type="html"><![CDATA[<blockquote><p>Change means that what was before wasn&#8217;t perfect. People want things to be better.</p><footer><strong>&#8211;Esther Dyson</strong></footer></blockquote>


<p>Looking back on my 6+ years at TheLadders, I realize how much has changed. When I first joined the company at the start of 2007, there were five other people on the QA team supporting a team of 12 software developers. We followed a strict waterfall process. Product ideas were generated, researched and solidified before any conversation with the development or QA teams. Product managers would spend a large portion of their time hunkered down at their desks writing specification documents, complete with statements on purpose and scope, workflows, wireframes and interaction rules.</p>

<p>After these documents were approved by business owners, the development, QA, and design teams would meet to walk through the document with the goal of estimating the implementation time. QA played the role of a customer advocate and tried to ensure that there was as little uncertainty in the documentation as possible. Instead of walking out of the meeting with estimates, the Product Manager would usually leave with a list of missing workflows and use cases that they would need to add to the spec before development began.</p>

<p>Eventually a release date would be set. Spec and design mocks in hand, the development team would start building the feature.  The QA team would write test cases. We created long lists of actions and expected outcomes that we would use to manually test the development team’s work. Test automation &ndash; unit, integration, functional, load, et al &ndash; was a distant dream. Our primary interaction with the development team was proving the existence of bugs that they couldn’t reproduce.</p>

<p><img class="center" src="http://dev.theladders.com/images/the-evolution-of-qa-at-theladders/it-works-on-my-machine.png"></p>

<p>Even though both the development and QA teams worked off of the same documents, the software never matched the expected behavior according to the test case. Preparing for a release was a never-ending cycle of testing, bug-finding, bug-fixing, and retesting. Fixed release dates and not testing until the end of the development cycle led to releases that were huge events with late, stressful nights leading up to release and late, stressful nights spent cleaning up after it was over!</p>

<p>Between major releases, QA was either responding to customer issues, estimating how long it would take to test an upcoming project, or maintaining our set of regression test case documents in Excel.</p>

<h2>Fast forward to 2009.</h2>

<p>The development team had grown to 35. The QA team had shrunk to 4. We’d transitioned to Scrum a few months previous and shuffled the production teams around to form 4 cross-functional ones. Each team consisted of developers, a QA lead, a designer, a copy editor, and a product manager. The move to Scrum was bumpy as we molded the framework into a process that worked for us but teams had started to find a groove. Ideas were generated and defined within each team, we were checking in with each other often, and delivering value to our customers faster. The teams were working like well-oiled machines&hellip; almost.</p>

<p>Selecting user stories to be undertaken during an iteration had become a team decision, however then the Product Manager and QA rep would work together, without the rest of the team, to define the requirements for each story and flesh them out into use case documents. QA still played the role of customer advocate: working to clearly define expected behavior of each user story in terms of the use case document.</p>

<p>The developers would use these documents to build each user story. Sometimes, they&rsquo;d also write unit tests to cover a few of the more important use case scenarios. Before a story was considered &ldquo;done&rdquo;, a code review would need to be completed by at least two developers. In order to make sure that each story met customer expectations, QA would need to manually test the feature. The need for manual testing didn’t end there. At the end of each iteration, QA would run through the entire regression suite before releasing.</p>

<p>We had made some improvements, but it was clear that we could improve the process if we increased communication of requirements and lessened the amount of manual testing that needed to be done.</p>

<p>We were releasing every two weeks. They were smaller and less stressful than in the past. QA still spent a lot of time manually testing, but it was done throughout the iteration instead of being squeezed in at the end. This meant that QA had a lot more downtime than before. While some of this time was spent doing the work we had always done, we also made sure to spend time learning about new tools and best practices. Over time, we learned a lot about automated functional testing. We experimented with different frameworks, starting with a simple record-and-playback tool, until we learned more about what we needed and which tools might best fit that need. I’ll write a post later to shed some light on what that journey was like, but suffice it to say that it took quite a bit of trial and error!</p>

<h2>Fast forward to now.</h2>

<p>We&rsquo;ve moved beyond Scrum to an adapted Agile process that emphasises cross-functional, independent, and highly collaborative teams. Each team is free to adopt practices that work for them. They have free reign to define the way that they work amongst themselves. There are certain commonalities that hold true across all our teams:</p>

<p><strong>QA plays the role of customer advocate</strong>. We know our customers well and our applications even better. This gives us a unique perspective when defining new user stories that helps our teams deliver better products for our users.</p>

<p><strong>The teams define user stories together</strong>. QA still helps flesh out requirements and acceptance criteria, but with the participation of the rest of the team. Defining requirements as a team helps us make sure that we&rsquo;re all on the same page which in turn helps us work better and faster.</p>

<p><strong>We aren&rsquo;t heavy-handed with the documentation</strong>. We&rsquo;ve found that most of our previous attempts at documentation were wasteful &ndash; and often not as useful to the developers as we thought. Instead, after each team conversation around story requirements QA either writes notes and acceptance criteria on the back of the story card (if the team uses a whiteboard to manage their backlog) or in comments attached to the story in Trello.</p>

<p><strong>We automate tests when it&rsquo;s the smart thing to do</strong>. Manually testing everything definitely was not the best thing for us to do, but <a href="http://xkcd.com/1205/">neither is automating every test</a>. Instead, QA and the developers have frequent conversations around how to appropriately test each user scenario: Can it be sufficiently covered in a unit or integration test? Does it make sense to write an expensive automated functional test that checks the functionality through the browser? How important is this functionality? What&rsquo;s the risk of it breaking? We also keep test coverage at the front of our minds and use different <a href="http://dev.theladders.com/2013/02/mutation-testing-with-pit-a-step-beyond-normal-code-coverage/">strategies</a> to make sure that we can trust the tests that we do automate.</p>

<p><strong>Developers write most of our automated tests</strong>. Whether unit, integration, functional, or load tests, usually it&rsquo;s a developer that&rsquo;s going to write it. QA does pitch in when they can but with one QA lead per team, it&rsquo;s not feasible for them to write all of the automated tests without becoming a bottleneck.</p>

<p><strong>We peer review code</strong> with QA actively participating.</p>

<p><strong>We&rsquo;ve set up continuous integration builds</strong>. All of our unit-level tests run after each commit and all of our automated functional regression tests must pass before each deployment. If a test fails, we fix it.</p>

<p>And of course, QA is still responsible for investigating and responding to customer issues. Some things will never change.</p>

<p>We&rsquo;ve come a long way! But that doesn&rsquo;t mean that we can&rsquo;t get better. As a wise man* once said, consistency requires you to be as ignorant today as you were a year ago. Here at TheLadders, we&rsquo;re always learning.</p>

<p>*Bernard Berenson</p>

<p>Join the discussion over at <a href="http://www.softwaretestingclub.com/forum/topics/how-has-the-role-of-qa-evolved">Software Testing Club</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Varnish in Five Acts]]></title>
    <link href="http://dev.theladders.com/2013/05/varnish-in-five-acts/"/>
    <updated>2013-05-03T13:21:00-04:00</updated>
    <id>http://dev.theladders.com/2013/05/varnish-in-five-acts</id>
    <content type="html"><![CDATA[<blockquote><p>“Take a load off Annie. Take a load for free. Take a load off Annie. And you put the load right on me.” &#8211; Robbie Robertson</p></blockquote>


<h2>Act I: The Players</h2>

<p>At TheLadders, we have a number of entity services that clients access via HTTP. Some examples are the job service, the job application service and the topic of this post: the job seeker service. Each service manages the lifecycle of a core entity in our domain. On each request, the service gathers data from multiple data sources to build a complete entity and then serializes that entity to JSON. This is done for every request and is incredibly wasteful when you consider that most of these entities don’t change that often. This was a major bottleneck in our infrastructure. In the case of the job seeker service, the same entity can be requested multiple times per request from our consumer website.</p>

<p>All this repeated, unnecessary entity object assembly and JSON serialization created scaling problems. Making matters worse, we periodically have batch processes that can increase service load by an order of magnitude. Caching is an easy win here. The question is how.</p>

<p>Initial attempts to cache these entities were done inside the service JVMs, using familiar and popular JVM based caches like EHcache and calls out to memcache. Unfortunately, this left us operating at JVM speeds and the caches were competing with the service logic for memory and threads.</p>

<p>In addition, our service code was muddled with messy caching logic.  Making the code harder to reuse, and more annoyingly, changes just affecting caching forced us to re-release the entire service.  We didn’t like this mixing of concerns.</p>

<p>We thought we could do better if we used external read through caches. It&rsquo;s easy to slide them between existing clients and services. With caching outside the service, it get released only when their logic changes not because we’re tuning caching.</p>

<p>For reasons too numerous to cover in this post we chose <a href="https://www.varnish-cache.org/about">Varnish</a> as our read through cache.</p>

<hr />

<h2>Act II: The Architecture</h2>

<p>When we introduced Varnish to our architecture, we wanted to make sure we were not adding a single point of failure. Simply put, if the cache layer goes down, our infrastructure should continue running. Performance might be degraded, but we should continue to be able to serve content to clients.</p>

<p>The diagram below shows a typical setup. In a normal scenario, a client accesses Varnish via a load balancer. Varnish in turn farms out the work in round robin fashion to one of four job seeker service nodes. Should Varnish become unavailable, the load balancer stops sending traffic to Varnish and reroutes it to the four job seeker service nodes.</p>

<p><img class="center" src="http://dev.theladders.com/images/varnish-in-five-acts/varnish-flow.png"></p>

<p>Of all our entity services, the job seeker services carries the highest median load. The graph below is the 1 minute request rate on 4 jobseeker service nodes over the 36 hour period before and after Varnish was turned on.</p>

<p><img class="center" src="http://dev.theladders.com/images/varnish-in-five-acts/before-after.png"></p>

<hr />

<h2>Act III: Cache Invalidation</h2>

<p>Cache invalidation is one of the 2 hard problems in computer science along with naming things and off by one errors.</p>

<p>We cache job seeker entity representations until some point in the “far future”, which is great until something about that job seeker changes, then we must invalidate the cached entry. So, how do we do that?</p>

<p>Two ways.</p>

<h3>Via Header:</h3>

<p>All requests that change the state of a job seeker that are made via the service attach a header in the response called &ldquo;x-invalidates&rdquo; that looks something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x-invalidates: /jobseekers/123</span></code></pre></td></tr></table></div></figure>


<p>Varnish, when it sees this header, turns the value into a content expiring regular expression. My team mate <a href="http://twitter.com/johnconnolly">@johnconnolly</a> learned about this general technique from <a href="https://twitter.com/kevburnsjr">Kevin Burns Jr.</a> at <a href="RESTFest">http://restfest.org</a> 2012.  I used Kevin’s post on the <a href="http://blog.kevburnsjr.com/tagged-cache-invalidation">subject</a> as a jumping off point for our implementation.</p>

<h3>Via Magic:</h3>

<p>Once upon a time, we had a database administrator named Gennady. Gennady wrote a <a href="http://www.dinodigusa.com/images/Magic1.gif">PHP script that reads MySQL’s binary logs</a>, looking for changes to a set of predefined tables. When it sees an update, it finds the primary key for the row and fires off an invalidation request. In our case, a purge of the cached jobseeker url in Varnish. This allows us to invalidate cached job seeker entities even when the update was performed via legacy code that interacts directly with the database rather than through the service.</p>

<p>If you were to do this manually, it would look something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X PURGE varnish-jobseeker/jobseekers/123</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Act IV: Configuration Spelunking</h2>

<p>So, how did we do it? I’m going to break down our configuration into its parts and cover the general role each part plays. From here on out, I’m assuming you understand the basics of how Varnish works and how you configure it. Also, there is some repetition in our configuration that isn’t required, it just makes it easier for our configuration management tool, puppet, to create the final output.</p>

<h3>Load Balancing</h3>

<p>We have four service servers behind varnish so we create four backend entries and then set up a director to round robin between them. Then in vcl_recv, we set our director named &lsquo;nodes&rsquo; to be the backend that we will use to fetch content.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>backend JS1 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS1&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend JS2 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS2&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend JS3 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS3&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend JS4 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS4&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>director nodes round-robin <span class="o">{</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS1 ; <span class="o">}</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS2 ; <span class="o">}</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS3 ; <span class="o">}</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS4 ; <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_recv <span class="o">{</span>
</span><span class='line'>  <span class="nb">set </span>req.backend <span class="o">=</span> nodes;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># store in cache only by url, not backend host</span>
</span><span class='line'>sub vcl_hash <span class="o">{</span>
</span><span class='line'>  hash_data<span class="o">(</span>req.url<span class="o">)</span>;
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="nb">hash</span><span class="o">)</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Degraded</h3>

<p>Each backend is setup with a probe url that we use to check its health. If the probe url doesn&rsquo;t return at least one HTTP 200 response within a fifteen second period, we mark that backend as unhealthy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>backend ... <span class="o">{</span>
</span><span class='line'>   ...
</span><span class='line'>
</span><span class='line'>  .probe <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    .url <span class="o">=</span> <span class="s2">&quot;/donjohnson/pulse&quot;</span>;
</span><span class='line'>    .interval <span class="o">=</span> 5s;
</span><span class='line'>    .timeout <span class="o">=</span> 250ms;
</span><span class='line'>    .window <span class="o">=</span> 3;
</span><span class='line'>    .threshold <span class="o">=</span> 2;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Varnish has the concept of a grace period, wherein, we can keep content alive in our cache past the TTL based on the health status of our backends. In our case, when the all backends are down, we keep cached items alive for an extra hour. During this time, we operate in a degraded status. Read requests for cached items will be handled while write requests will fail because there is no backend service to handle them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sub vcl_fetch <span class="o">{</span>
</span><span class='line'>  <span class="c"># max time to keep an item in the cache past its ttl</span>
</span><span class='line'>  <span class="c"># used in conjunction with code in vcl_recv to</span>
</span><span class='line'>  <span class="c"># deal with &#39;sick&#39; backends</span>
</span><span class='line'>  <span class="nb">set </span>beresp.grace <span class="o">=</span> 1h;
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_recv <span class="o">{</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  <span class="c"># extra ttl for cached objects based on backend health</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>!req.backend.healthy<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">set </span>req.grace <span class="o">=</span> 1h;
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">set </span>req.grace <span class="o">=</span> 15s;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Invalidation</h3>

<p>We do two types of invalidation:</p>

<ul>
<li>invalidation based on the &lsquo;x-invalidates&rsquo; header that comes back with a response</li>
<li>&lsquo;manual&rsquo; invalidation based on sending the HTTP PURGE verb to a url in the Varnish cache.</li>
</ul>


<p>The ability to do a manual purge is limited to a small set of IP addresses that we validate against when a purge request is received.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>acl purge <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;localhost&quot;</span>;
</span><span class='line'>  <span class="s2">&quot;10.10.10.10&quot;</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_recv <span class="o">{</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  <span class="c"># &#39;manual&#39; purge</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>client.ip ~ purge<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span><span class="o">(</span>lookup<span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    error 405 <span class="s2">&quot;Not allowed.&quot;</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The actual mechanics of doing the purge are fairly simple. If the url attempted to be purged exists, purge it and return a 200.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sub vcl_hit <span class="o">{</span>
</span><span class='line'>  <span class="c"># &#39;manual&#39; purge</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    purge;
</span><span class='line'>    error 200 <span class="s2">&quot;Purged.&quot;</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it doesn&rsquo;t, return a 404 response code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sub vcl_miss <span class="o">{</span>
</span><span class='line'>  <span class="c"># &#39;manual&#39; purge</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    purge;
</span><span class='line'>    error 404 <span class="s2">&quot;Not in cache.&quot;</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update requests include invalidation-related headers. Every request we fetch has, inside of Varnish, its request url stored in a special x-url header. This will be used as the url to check the x-invalidates header against. As this header is purely for our internal use, we remove it before delivering items to a client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sub vcl_fetch <span class="o">{</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  <span class="nb">set </span>beresp.http.x-url <span class="o">=</span> req.url;
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_deliver <span class="o">{</span>
</span><span class='line'>  <span class="c"># clear internal cache invalidation header before sending to client</span>
</span><span class='line'>  <span class="nb">unset </span>resp.http.x-url;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any &lsquo;successful&rsquo; PUT, POST, DELETE or PATCH response will have its x-invalidates header used as a regular expression to invalidate existing content whose x-url header matches the x-invalidates regex.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sub vcl_fetch <span class="o">{</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  <span class="c"># cache invalidation</span>
</span><span class='line'>  <span class="nb">set </span>beresp.http.x-url <span class="o">=</span> req.url;
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PUT&quot;</span> <span class="o">||</span> req.request <span class="o">==</span> <span class="s2">&quot;POST&quot;</span> <span class="o">||</span> req.request <span class="o">==</span> <span class="s2">&quot;DELETE&quot;</span> <span class="o">||</span> req.request <span class="o">==</span> <span class="s2">&quot;PATCH&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span>  <span class="o">(</span>beresp.status &gt;<span class="o">=</span> 200 <span class="o">&amp;&amp;</span> beresp.status &lt; 400<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     ban<span class="o">(</span><span class="s2">&quot;obj.http.x-url ~ &quot;</span> + beresp.http.x-invalidates<span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Act V: The final product</h2>

<p>And finally, we put it all together into a complete file (note, we use Varnish 3, the semantics around ban/purge changed from v2 to v3):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>backend JS1 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS1&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>  .probe <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    .url <span class="o">=</span> <span class="s2">&quot;/donjohnson/pulse&quot;</span>;
</span><span class='line'>    .interval <span class="o">=</span> 5s;
</span><span class='line'>    .timeout <span class="o">=</span> 250ms;
</span><span class='line'>    .window <span class="o">=</span> 3;
</span><span class='line'>    .threshold <span class="o">=</span> 2;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend JS2 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS2&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>  .probe <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    .url <span class="o">=</span> <span class="s2">&quot;/donjohnson/pulse&quot;</span>;
</span><span class='line'>    .interval <span class="o">=</span> 5s;
</span><span class='line'>    .timeout <span class="o">=</span> 250ms;
</span><span class='line'>    .window <span class="o">=</span> 3;
</span><span class='line'>    .threshold <span class="o">=</span> 2;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend JS3 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS3&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>  .probe <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    .url <span class="o">=</span> <span class="s2">&quot;/donjohnson/pulse&quot;</span>;
</span><span class='line'>    .interval <span class="o">=</span> 5s;
</span><span class='line'>    .timeout <span class="o">=</span> 250ms;
</span><span class='line'>    .window <span class="o">=</span> 3;
</span><span class='line'>    .threshold <span class="o">=</span> 2;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend JS4 <span class="o">{</span>
</span><span class='line'>  .host  <span class="o">=</span> <span class="s2">&quot;JS4&quot;</span>;
</span><span class='line'>  .port  <span class="o">=</span> <span class="s2">&quot;8080&quot;</span>;
</span><span class='line'>  .probe <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    .url <span class="o">=</span> <span class="s2">&quot;/donjohnson/pulse&quot;</span>;
</span><span class='line'>    .interval <span class="o">=</span> 5s;
</span><span class='line'>    .timeout <span class="o">=</span> 250ms;
</span><span class='line'>    .window <span class="o">=</span> 3;
</span><span class='line'>    .threshold <span class="o">=</span> 2;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>director nodes round-robin <span class="o">{</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS1 ; <span class="o">}</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS2 ; <span class="o">}</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS3 ; <span class="o">}</span>
</span><span class='line'>  <span class="o">{</span> .backend <span class="o">=</span> JS4 ; <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># what machines can institute a &#39;manual&#39; purge</span>
</span><span class='line'>acl purge <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;localhost&quot;</span>;
</span><span class='line'>  <span class="s2">&quot;192.1.1.4&quot;</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># store in cache only by url, not backend host</span>
</span><span class='line'>sub vcl_hash <span class="o">{</span>
</span><span class='line'>  hash_data<span class="o">(</span>req.url<span class="o">)</span>;
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="nb">hash</span><span class="o">)</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_fetch <span class="o">{</span>
</span><span class='line'>  <span class="c"># max time to keep an item in the cache past its ttl</span>
</span><span class='line'>  <span class="c"># used in conjunction with code in vcl_recv to</span>
</span><span class='line'>  <span class="c"># deal with &#39;sick&#39; backends</span>
</span><span class='line'>  <span class="nb">set </span>beresp.grace <span class="o">=</span> 1h;
</span><span class='line'>
</span><span class='line'>  <span class="c"># cache invalidation</span>
</span><span class='line'>  <span class="nb">set </span>beresp.http.x-url <span class="o">=</span> req.url;
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PUT&quot;</span> <span class="o">||</span> req.request <span class="o">==</span> <span class="s2">&quot;POST&quot;</span> <span class="o">||</span> req.request <span class="o">==</span> <span class="s2">&quot;DELETE&quot;</span> <span class="o">||</span> req.request <span class="o">==</span> <span class="s2">&quot;PATCH&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span>  <span class="o">(</span>beresp.status &gt;<span class="o">=</span> 200 <span class="o">&amp;&amp;</span> beresp.status &lt; 400<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     ban<span class="o">(</span><span class="s2">&quot;obj.http.x-url ~ &quot;</span> + beresp.http.x-invalidates<span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_recv <span class="o">{</span>
</span><span class='line'>  <span class="nb">set </span>req.backend <span class="o">=</span> nodes;
</span><span class='line'>
</span><span class='line'>  <span class="c"># &#39;manual&#39; purge</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>client.ip ~ purge<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span><span class="o">(</span>lookup<span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    error 405 <span class="s2">&quot;Not allowed.&quot;</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># extra ttl for cached objects based on backend health</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>!req.backend.healthy<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">set </span>req.grace <span class="o">=</span> 1h;
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">set </span>req.grace <span class="o">=</span> 15s;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_deliver <span class="o">{</span>
</span><span class='line'>  <span class="c"># clear internal cache invalidation header before sending to client</span>
</span><span class='line'>  <span class="nb">unset </span>resp.http.x-url;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_hit <span class="o">{</span>
</span><span class='line'>  <span class="c"># &#39;manual&#39; purge</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    purge;
</span><span class='line'>    error 200 <span class="s2">&quot;Purged.&quot;</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sub vcl_miss <span class="o">{</span>
</span><span class='line'>  <span class="c"># &#39;manual&#39; purge</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    purge;
</span><span class='line'>    error 404 <span class="s2">&quot;Not in cache.&quot;</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hidden Track Bonus Act:</h2>

<p><img class="center" src="http://dev.theladders.com/images/varnish-in-five-acts/varnish-all-the-things.jpg"></p>

<p>Join the discussion over at <a href="https://news.ycombinator.com/item?id=5651874">Hacker News</a>.</p>
]]></content>
  </entry>
  
</feed>
